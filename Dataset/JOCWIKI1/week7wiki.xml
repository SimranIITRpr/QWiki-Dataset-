<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>JOCWiki</sitename>
    <dbname>joc_wiki</dbname>
    <base>http://sccilabs.org/jocwiki/index.php/Main_Page</base>
    <generator>MediaWiki 1.30.0</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">JOCWiki</namespace>
      <namespace key="5" case="first-letter">JOCWiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
      <namespace key="2600" case="first-letter">Topic</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Lecture Notes: Week 7</title>
    <ns>0</ns>
    <id>631</id>
    <revision>
      <id>1890</id>
      <timestamp>2018-09-10T01:06:55Z</timestamp>
      <contributor>
        <username>Bhavesh</username>
        <id>47</id>
      </contributor>
      <comment>Created page with &quot; == Snakes and Ladders == ====Introduction =====&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48">
== Snakes and Ladders ==
====Introduction =====</text>
      <sha1>qwu7375bqczc4k0bv93jv6xcj90xtd8</sha1>
    </revision>
    <revision>
      <id>1894</id>
      <parentid>1890</parentid>
      <timestamp>2018-09-10T01:10:37Z</timestamp>
      <contributor>
        <username>Bhavesh</username>
        <id>47</id>
      </contributor>
      <comment>/* Introduction = */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="49">
== Snakes and Ladders ==
==== Introduction =====</text>
      <sha1>b64pwqteozhq371u5lsn2ohox4tbbtv</sha1>
    </revision>
    <revision>
      <id>1944</id>
      <parentid>1894</parentid>
      <timestamp>2018-09-11T03:25:31Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Snakes and Ladders */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3753">
== Snakes and Ladders ==
==== Introduction =====
==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
    
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0
    
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
show_board()    
play()

'''Sample Output:
    Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
'''
&lt;/pre&gt;</text>
      <sha1>0fellkt7o0uxbdr4c1tp6kysekrdf32</sha1>
    </revision>
    <revision>
      <id>1946</id>
      <parentid>1944</parentid>
      <timestamp>2018-09-11T03:33:35Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction = */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4461">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
    
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0
    
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
show_board()    
play()

'''Sample Output:
    Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
'''
&lt;/pre&gt;</text>
      <sha1>sp8s2oshzp8b70k7cwvkdxqr0yoc9r6</sha1>
    </revision>
    <revision>
      <id>1947</id>
      <parentid>1946</parentid>
      <timestamp>2018-09-11T03:34:39Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4552">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
    
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0
    
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
show_board()    
play()

'''Sample Output:
    Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
'''
&lt;/pre&gt;</text>
      <sha1>kekx8juk2s6b17maa6zol9u3wpolk6x</sha1>
    </revision>
    <revision>
      <id>1948</id>
      <parentid>1947</parentid>
      <timestamp>2018-09-11T03:51:34Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8013">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation Before Writing the Code Taught in Lecture: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. Code for that,
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, end ====
When user rolls the dice, we will add new position to current position plus, number generated on dice. Now, we have to check whether, 

&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;
==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
show_board()    
play()

'''Sample Output:
    Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
'''
&lt;/pre&gt;</text>
      <sha1>owk1ujbmnehri8b667fd1tlh4px3gu6</sha1>
    </revision>
    <revision>
      <id>1949</id>
      <parentid>1948</parentid>
      <timestamp>2018-09-11T03:52:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Check for Snake or Ladder, end */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8014">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation Before Writing the Code Taught in Lecture: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. Code for that,
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
When user rolls the dice, we will add new position to current position plus, number generated on dice. Now, we have to check whether, 

&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
show_board()    
play()

'''Sample Output:
    Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
'''
&lt;/pre&gt;</text>
      <sha1>lc6blkjuaaz4gsgux6hup0xz5j3wrvs</sha1>
    </revision>
    <revision>
      <id>1950</id>
      <parentid>1949</parentid>
      <timestamp>2018-09-11T03:52:47Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Explanation Before Writing the Code Taught in Lecture: */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8039">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation Before Writing the Code Taught in Lecture: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. Code for that,
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:Example.jpg]]
---
==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
When user rolls the dice, we will add new position to current position plus, number generated on dice. Now, we have to check whether, 

&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
show_board()    
play()

'''Sample Output:
    Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
'''
&lt;/pre&gt;</text>
      <sha1>fax7lrnsl0nwmknzc718u27ie5083dk</sha1>
    </revision>
    <revision>
      <id>1951</id>
      <parentid>1950</parentid>
      <timestamp>2018-09-11T03:55:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Show board */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8036">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation Before Writing the Code Taught in Lecture: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. Code for that,
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
When user rolls the dice, we will add new position to current position plus, number generated on dice. Now, we have to check whether, 

&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
show_board()    
play()

'''Sample Output:
    Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
'''
&lt;/pre&gt;</text>
      <sha1>eyao5fjqpu0mq21evnx71oxvwlulwu1</sha1>
    </revision>
    <revision>
      <id>1953</id>
      <parentid>1951</parentid>
      <timestamp>2018-09-11T04:00:28Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Explanation Before Writing the Code Taught in Lecture: */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8103">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code Taught in Lecture: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. Code for that,
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
show_board()    
play()

'''Sample Output:
    Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
'''
&lt;/pre&gt;</text>
      <sha1>98hjn9h1bldx7lx854zppr1sciftf7f</sha1>
    </revision>
    <revision>
      <id>1954</id>
      <parentid>1953</parentid>
      <timestamp>2018-09-11T04:01:52Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8106">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code Taught in Lecture: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. Code for that,
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
show_board()    
play()

====Sample Output:====
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;</text>
      <sha1>iq2d6poggdhu8wqgyv13bssmiexatp9</sha1>
    </revision>
    <revision>
      <id>1955</id>
      <parentid>1954</parentid>
      <timestamp>2018-09-11T04:03:22Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8157">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code Taught in Lecture: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. Code for that,
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
---
====Sample Output:====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---</text>
      <sha1>j7hpq68cii0escbisqgv2vv5pdfqelb</sha1>
    </revision>
    <revision>
      <id>1956</id>
      <parentid>1955</parentid>
      <timestamp>2018-09-11T04:03:57Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8164">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code Taught in Lecture: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. Code for that,
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---
====Sample Output:====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---</text>
      <sha1>amobc1d9t4lt4gfi3f08rh84nh21spo</sha1>
    </revision>
    <revision>
      <id>1957</id>
      <parentid>1956</parentid>
      <timestamp>2018-09-11T04:04:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Sample Output: */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8163">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code Taught in Lecture: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. Code for that,
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---
====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---</text>
      <sha1>sy0o38q2ow9g3380cvz4yimal6l9o6l</sha1>
    </revision>
    <revision>
      <id>1958</id>
      <parentid>1957</parentid>
      <timestamp>2018-09-11T04:04:43Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8164">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code Taught in Lecture: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. Code for that,
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---</text>
      <sha1>c8w7kvbjv53a5r02mc2ubxa9s771qtf</sha1>
    </revision>
    <revision>
      <id>1959</id>
      <parentid>1958</parentid>
      <timestamp>2018-09-11T04:06:44Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Explanation for the Code Taught in Lecture: */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8341">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---</text>
      <sha1>gx23ayypvazcza7oc1wfgjq3jmmgpdr</sha1>
    </revision>
    <revision>
      <id>1969</id>
      <parentid>1959</parentid>
      <timestamp>2018-09-11T04:42:37Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9145">
== Snakes and Ladders ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== GPS Tracker ==
=== Code: ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;</text>
      <sha1>d3bs3tjvbqewma0sjbtvcujl8enxfdk</sha1>
    </revision>
    <revision>
      <id>1970</id>
      <parentid>1969</parentid>
      <timestamp>2018-09-11T04:43:39Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Snakes and Ladders */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9174">
== Snakes and Ladders == By Ms.Ami Tusharkant Choksi
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker ==
=== Code: ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;</text>
      <sha1>3b3nv7aynk2tywqi8mwnkz67t0lqwlb</sha1>
    </revision>
    <revision>
      <id>1971</id>
      <parentid>1970</parentid>
      <timestamp>2018-09-11T04:44:25Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9202">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Code: ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;</text>
      <sha1>p6ie8rw53cun6r2shs5wktgp8qinxt7</sha1>
    </revision>
    <revision>
      <id>1973</id>
      <parentid>1971</parentid>
      <timestamp>2018-09-11T05:51:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* GPS Tracker By Ms.Ami Tusharkant Choksi */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9251">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Code: ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;
=== Output : mymap.html ===
[[File: mymap.html]]</text>
      <sha1>giz98t8auyja7m3g6xhkcord2tactyg</sha1>
    </revision>
    <revision>
      <id>1974</id>
      <parentid>1973</parentid>
      <timestamp>2018-09-11T05:53:38Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Output : mymap.html */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9285">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Code: ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;
=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>6ufniw732ertz38ewhkzwji7qy13zis</sha1>
    </revision>
    <revision>
      <id>1976</id>
      <parentid>1974</parentid>
      <timestamp>2018-09-11T06:05:57Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* GPS Tracker By Ms.Ami Tusharkant Choksi */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9954">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---
=== Code: ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;
=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>6mwzkghwqg73xdqeask1c3cr7w4vy3l</sha1>
    </revision>
    <revision>
      <id>1977</id>
      <parentid>1976</parentid>
      <timestamp>2018-09-11T06:14:24Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Explanation for Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10811">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---
==== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---
=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. 
---

=== Code: ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;
=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>ao6w0eqax7d6epav5jfirlgorft4bov</sha1>
    </revision>
    <revision>
      <id>1978</id>
      <parentid>1977</parentid>
      <timestamp>2018-09-11T06:16:22Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* = route.csv */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10811">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---
=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. 
---

=== Code: ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;
=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>t4jxokmvnbjpbgvfh5tz7qw5wn4me9d</sha1>
    </revision>
    <revision>
      <id>1979</id>
      <parentid>1978</parentid>
      <timestamp>2018-09-11T06:16:55Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Explanation for Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10812">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. 
---

=== Code: ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;
=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>25gn7ymhypo0zvo2hdjhu5nawf1lkkf</sha1>
    </revision>
    <revision>
      <id>1980</id>
      <parentid>1979</parentid>
      <timestamp>2018-09-11T06:26:05Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* GPS Tracker By Ms.Ami Tusharkant Choksi */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11646">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code: ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;
=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>ftks0tg0o1u6ti9j1saj7ssvex0u12v</sha1>
    </revision>
    <revision>
      <id>1981</id>
      <parentid>1980</parentid>
      <timestamp>2018-09-11T06:26:27Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code: */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11646">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>eund39rkox63rme00dnw9x6ztiij3eb</sha1>
    </revision>
    <revision>
      <id>1982</id>
      <parentid>1981</parentid>
      <timestamp>2018-09-11T06:27:36Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Use of gmplot module */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11650">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=darkyellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>jx1eimiv3lrtsmyiphxgv845szlca90</sha1>
    </revision>
    <revision>
      <id>1983</id>
      <parentid>1982</parentid>
      <timestamp>2018-09-11T06:28:58Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* GPS Tracker By Ms.Ami Tusharkant Choksi */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11646">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>eund39rkox63rme00dnw9x6ztiij3eb</sha1>
    </revision>
    <revision>
      <id>1984</id>
      <parentid>1983</parentid>
      <timestamp>2018-09-11T06:56:01Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12706">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spriral Traversal By Ms.Ami Tusharkant Choksi ==
=== Code ===
=== Spiral Traversal of Matrix textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>gfqlnthj83ci0dsmtg9yfhmujkayhf4</sha1>
    </revision>
    <revision>
      <id>1985</id>
      <parentid>1984</parentid>
      <timestamp>2018-09-11T06:59:06Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12798">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spriral Traversal By Ms.Ami Tusharkant Choksi ==
=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>1if4nchva9a0scdzy2so2ivtho8qey5</sha1>
    </revision>
    <revision>
      <id>1986</id>
      <parentid>1985</parentid>
      <timestamp>2018-09-11T07:02:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Spriral Traversal By Ms.Ami Tusharkant Choksi */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12880">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:Spiral.svg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>3yycvgzjfaz7r2nmb0zb84g57yughwl</sha1>
    </revision>
    <revision>
      <id>1987</id>
      <parentid>1986</parentid>
      <timestamp>2018-09-11T07:02:48Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12884">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.svg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>onh5dwbmguy15ekthcgymtte498b0s8</sha1>
    </revision>
    <revision>
      <id>1988</id>
      <parentid>1987</parentid>
      <timestamp>2018-09-11T07:08:08Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12884">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>89efcedyjh4sdif7z25je2ag29tktve</sha1>
    </revision>
    <revision>
      <id>1990</id>
      <parentid>1988</parentid>
      <timestamp>2018-09-11T07:13:33Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Spiral Traversal By Ms.Ami Tusharkant Choksi */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13284">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>m684o42vvmeftombdr5i27tk852u1jx</sha1>
    </revision>
    <revision>
      <id>1991</id>
      <parentid>1990</parentid>
      <timestamp>2018-09-11T07:14:32Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Spiral Traversal of Matrix Graphically */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13292">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>hz6zck5gwiwnfqv1zhb6clq3zlvrxvk</sha1>
    </revision>
    <revision>
      <id>1992</id>
      <parentid>1991</parentid>
      <timestamp>2018-09-11T07:16:57Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Spiral Traversal of Matrix Graphically */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13455">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Line ====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
==== Star ====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>ch76cedmpu0i3ayzo373pwl1kg4ucyc</sha1>
    </revision>
    <revision>
      <id>1993</id>
      <parentid>1992</parentid>
      <timestamp>2018-09-11T07:20:36Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Spiral Traversal of Matrix Graphically */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13500">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>jqlzmx1757ayfmf83pwok98lqcfeyk6</sha1>
    </revision>
    <revision>
      <id>1994</id>
      <parentid>1993</parentid>
      <timestamp>2018-09-11T10:23:02Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Spiral Traversal of Matrix Graphically */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15003">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== Spiral Traversal Graphically ===
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>tu3glbkp6zorubp5pmfiw3divblyg4j</sha1>
    </revision>
    <revision>
      <id>1995</id>
      <parentid>1994</parentid>
      <timestamp>2018-09-11T10:23:31Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* = Spiral Traversal Graphically */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15002">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
=== Spiral Traversal Graphically ===
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>1s9ochlxjz0ad3r45lbrxnxkh440332</sha1>
    </revision>
    <revision>
      <id>1996</id>
      <parentid>1995</parentid>
      <timestamp>2018-09-11T10:24:09Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Spiral Traversal Graphically */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15012">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>jx6440xg1hd17k38rx25a06rf7pj6ho</sha1>
    </revision>
    <revision>
      <id>1999</id>
      <parentid>1996</parentid>
      <timestamp>2018-09-11T10:58:18Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* CODE OF Spiral Traversal Graphically */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15022">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>nsnklkouqn77fsx5x4yml6nwqahr27l</sha1>
    </revision>
    <revision>
      <id>2059</id>
      <parentid>1999</parentid>
      <timestamp>2018-09-12T23:01:48Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Snakes and Ladders By Ms.Ami Tusharkant Choksi */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15060">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Snake and Ladder By Sachin ==
---

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>s8afugrqp2fh6ctsrqzgqn3ulnx4r90</sha1>
    </revision>
    <revision>
      <id>2062</id>
      <parentid>2059</parentid>
      <timestamp>2018-09-12T23:36:23Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Snake and Ladder By Sachin */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22618">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
== Snake and Ladder By Sachin ==
---

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>ph9yq0ulzjxzi5qwjyx6d5qy5c00y4w</sha1>
    </revision>
    <revision>
      <id>2066</id>
      <parentid>2062</parentid>
      <timestamp>2018-09-12T23:41:46Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Snake and Ladder By Sachin */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22714">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>sgkhd61jsuezaoiabm1nfhr7vmpoaat</sha1>
    </revision>
    <revision>
      <id>2263</id>
      <parentid>2066</parentid>
      <timestamp>2018-09-14T11:48:06Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22720">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg|500px]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>a46s675h7tilp7g568egaryclunbf0o</sha1>
    </revision>
    <revision>
      <id>2264</id>
      <parentid>2263</parentid>
      <timestamp>2018-09-14T11:48:38Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22720">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg|200px]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>nza9ry8xz81dys9yknt7ukid8rg3job</sha1>
    </revision>
    <revision>
      <id>2278</id>
      <parentid>2264</parentid>
      <timestamp>2018-09-15T01:03:27Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* GPS Tracker By Ms.Ami Tusharkant Choksi */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22725">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg|200px]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;
=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>3csffb2kpjbkqq4g39bkcqtljjy4x6q</sha1>
    </revision>
    <revision>
      <id>2279</id>
      <parentid>2278</parentid>
      <timestamp>2018-09-15T01:21:59Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* read csv file */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22726">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg|200px]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>fzpj7z04jisauqespi2cjeoijqkiojs</sha1>
    </revision>
    <revision>
      <id>2280</id>
      <parentid>2279</parentid>
      <timestamp>2018-09-15T01:22:26Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* route.csv */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22738">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Traverse the Matrix in spiral way, i.e.
[[File:RectSpiral.jpg|200px]]

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>rz1jhawvzfn5ujybclpevt8u46dnthb</sha1>
    </revision>
    <revision>
      <id>2305</id>
      <parentid>2280</parentid>
      <timestamp>2018-09-15T07:53:37Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22939">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Textural Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>55pfw929zoguscuhc6i7cd69u9xjly3</sha1>
    </revision>
    <revision>
      <id>2306</id>
      <parentid>2305</parentid>
      <timestamp>2018-09-15T07:54:45Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22935">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):
    k=0
    l=0
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        #printing the first row from the remaining rows
        for i in range(l,n):
            print(a[k][i], end=&quot; &quot;)
        k+=1
        #printing the last column from the remaining column
        for i in range(k,m):
            print(a[i][n-1],end=&quot; &quot;)
        n-=1
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                print(a[m-1][i],end=&quot; &quot;)
            m-=1
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                print(a[i][l],end=&quot; &quot;)
                l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;
=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>oygx06vwea5mu68vicscnks4mv33y4w</sha1>
    </revision>
    <revision>
      <id>2307</id>
      <parentid>2306</parentid>
      <timestamp>2018-09-15T08:15:30Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Spiral Traversal of Matrix Textually */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23405">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>o7v3asmjkhsliu91tcz49izjw1c6g7g</sha1>
    </revision>
    <revision>
      <id>2308</id>
      <parentid>2307</parentid>
      <timestamp>2018-09-15T08:37:33Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Spiral Traversal of Matrix Textually */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24004">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;


&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>dmotlfhtdvz9u6f23jcfk726hx1368o</sha1>
    </revision>
    <revision>
      <id>2309</id>
      <parentid>2308</parentid>
      <timestamp>2018-09-15T08:37:57Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Spiral Traversal of Matrix Textually */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24004">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;


&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
count=1
for i in range(4):
    l=[]
    for j in range(4):
        l.append(count)
        count+=1
    a.append(l)

spiral(4,4,a)
#Output:
#1 2 3 4 8 12 16 15 14 13 9 6 7 11
&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>bave12h9075fvh7mk353id0jx35u4w0</sha1>
    </revision>
    <revision>
      <id>2310</id>
      <parentid>2309</parentid>
      <timestamp>2018-09-15T08:47:57Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Spiral Traversal of Matrix Textually */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24130">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;

&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>0xwgxepu50fqk2qnpwu309nzlts26n7</sha1>
    </revision>
    <revision>
      <id>2311</id>
      <parentid>2310</parentid>
      <timestamp>2018-09-15T08:48:48Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Spiral Traversal of Matrix Textually */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24146">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>np1vb8lohx6l3yhwu9uk4b4rxup59cd</sha1>
    </revision>
    <revision>
      <id>2312</id>
      <parentid>2311</parentid>
      <timestamp>2018-09-15T08:49:56Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Spiral Traversal By Ms.Ami Tusharkant Choksi  and modified by Sam*/</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24120">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
=== Introduction ===
Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>sgobeeex9kw5sbn1u5ni9t4p30hfpxu</sha1>
    </revision>
    <revision>
      <id>2313</id>
      <parentid>2312</parentid>
      <timestamp>2018-09-15T08:51:56Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24120">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

=== Code ===
We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>3hzcrcxz9t6sngztw919yxgfscylbkk</sha1>
    </revision>
    <revision>
      <id>2314</id>
      <parentid>2313</parentid>
      <timestamp>2018-09-15T08:52:36Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24120">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
===== Line =====
&lt;pre&gt;
#--------&gt; in graphical mode
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)#Output is --------&gt; in graphical mode
&lt;/pre&gt;
---
===== Star =====
&lt;pre&gt;
import turtle 

star = turtle.Turtle()

for i in range(50):
    star.forward(50)
    star.right(144)
    
turtle.done()
&lt;/pre&gt;
==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>4k7a096po1oj76p7lkh4dl29ueglka0</sha1>
    </revision>
    <revision>
      <id>2316</id>
      <parentid>2314</parentid>
      <timestamp>2018-09-15T09:04:00Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Learning Graphics Using Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24024">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
'''Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== CODE OF Spiral Traversal of Matrix Graphically ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>su397pthj58rr12lz1vy8opxjs51ruc</sha1>
    </revision>
    <revision>
      <id>2317</id>
      <parentid>2316</parentid>
      <timestamp>2018-09-15T09:05:08Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* CODE OF Spiral Traversal of Matrix Graphically */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23982">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
'''Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== CODE ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>qls8i1xu5n0eynkr3qfcmab2lyymcoj</sha1>
    </revision>
    <revision>
      <id>2318</id>
      <parentid>2317</parentid>
      <timestamp>2018-09-15T09:05:35Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* CODE */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23982">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
---
&lt;pre&gt;
&quot;&quot;&quot;
Created on Tue Sep 11 11:59:28 2018
@author: amichoksi
&quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
'''Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>a3ke2cbr93ynaotc9uu0qv2zs1jqu5v</sha1>
    </revision>
    <revision>
      <id>2320</id>
      <parentid>2318</parentid>
      <timestamp>2018-09-15T09:06:20Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23980">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
'''Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1
##a=[]
##count=1
##for i in range(4):
##    l=[]
##    for j in range(4):
##        l.append(count)
##        count+=1
##    a.append(l)

#spiral(4,4,a)
spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>bjfk55oupcthmbb02594rkge360ccct</sha1>
    </revision>
    <revision>
      <id>2321</id>
      <parentid>2320</parentid>
      <timestamp>2018-09-15T09:12:01Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23828">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Learning Graphics Using Python ====
'''Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>4u9svfbv7s3mmfxpbgb96yp7djxiu7i</sha1>
    </revision>
    <revision>
      <id>2322</id>
      <parentid>2321</parentid>
      <timestamp>2018-09-15T09:12:45Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Learning Graphics Using Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23819">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle ====
'''Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>j93nbesp5hnr00rg93cn9l1xs8lbtcg</sha1>
    </revision>
    <revision>
      <id>2323</id>
      <parentid>2322</parentid>
      <timestamp>2018-09-15T09:24:05Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Graphics Using turtle */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24153">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle ====
Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command tur.forward(25), and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command tur.right(25), and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>n5dahpo8yyq9zufdx3l6w4x8tcgfkcy</sha1>
    </revision>
    <revision>
      <id>2324</id>
      <parentid>2323</parentid>
      <timestamp>2018-09-15T09:25:19Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Graphics Using turtle */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24170">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle ====
Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>elemfbj3ixykq2jjb9mepdykn3pj97x</sha1>
    </revision>
    <revision>
      <id>2325</id>
      <parentid>2324</parentid>
      <timestamp>2018-09-15T09:46:08Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Graphics Using turtle */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26141">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
====&lt;b&gt; Graphics Using turtle &lt;/b&gt; ====
Commonly used turtle methods are :
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>ef1dw2k8rs47i7etz4kya78ymt3aiqp</sha1>
    </revision>
    <revision>
      <id>2326</id>
      <parentid>2325</parentid>
      <timestamp>2018-09-15T09:58:25Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/*  Graphics Using turtle  */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26656">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
====&lt;b&gt; Graphics Using turtle &lt;/b&gt; ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>l5udpe5c9aw83gx0jcn79kwnzt5c7n4</sha1>
    </revision>
    <revision>
      <id>2327</id>
      <parentid>2326</parentid>
      <timestamp>2018-09-15T09:59:46Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/*  Graphics Using turtle  */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26649">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---
==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>412l8tg17mfvndr9oakc127512x44qz</sha1>
    </revision>
    <revision>
      <id>2332</id>
      <parentid>2327</parentid>
      <timestamp>2018-09-15T13:29:17Z</timestamp>
      <contributor>
        <username>Sudhi</username>
        <id>2411</id>
      </contributor>
      <comment>/* Play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26839">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the die was thrown, hence if die exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>o5gh7h09xwml3vh4pf3sxg7gretgrq6</sha1>
    </revision>
    <revision>
      <id>2336</id>
      <parentid>2332</parentid>
      <timestamp>2018-09-15T13:53:38Z</timestamp>
      <contributor>
        <username>Sudhi</username>
        <id>2411</id>
      </contributor>
      <comment>/* Check for Snake or Ladder, End */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27909">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the die was thrown, hence if die exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>7xxph60n7hv8h4yxjixi4bl4zc5it4t</sha1>
    </revision>
    <revision>
      <id>2337</id>
      <parentid>2336</parentid>
      <timestamp>2018-09-15T14:03:20Z</timestamp>
      <contributor>
        <username>Sudhi</username>
        <id>2411</id>
      </contributor>
      <minor/>
      <comment>/* Play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27912">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module is available or not
#on python shell
#from gmplot import gmplot        
#if not available, install it
#pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker
            (lat,long,'blue')
gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>gurp0r0gi82ibl3y1upndhtr2gq1wz0</sha1>
    </revision>
    <revision>
      <id>2338</id>
      <parentid>2337</parentid>
      <timestamp>2018-09-15T14:08:07Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27883">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module gmplot is available or not on python shell
#if not available, install it using pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap.png]]</text>
      <sha1>9f5mkrtted09pv6upe5ybfgpfsw42ui</sha1>
    </revision>
    <revision>
      <id>2340</id>
      <parentid>2338</parentid>
      <timestamp>2018-09-15T14:14:30Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Output of mymap.html */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27884">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
=== Explanation for Code ===
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be install&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module gmplot is available or not on python shell
#if not available, install it using pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>7x2af5na9y0h4k6yd43onjq7rhbtshm</sha1>
    </revision>
    <revision>
      <id>2341</id>
      <parentid>2340</parentid>
      <timestamp>2018-09-15T14:16:01Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Explanation for Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27886">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
''' Explanation for Code '''
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Contents of route.csv ===
route.csv file, as shared by Amitsir, is having data in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module gmplot is available or not on python shell
#if not available, install it using pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>3mxyosmho0zp8g2lqlcw816hpnoeygb</sha1>
    </revision>
    <revision>
      <id>2342</id>
      <parentid>2341</parentid>
      <timestamp>2018-09-15T14:19:18Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Contents of route.csv */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27900">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
''' Explanation for Code '''
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Data of GPS locations in .csv file ===
Contents of route.csv

Data as shared by Amit sir, is in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

=== Read csv file ===
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module gmplot is available or not on python shell
#if not available, install it using pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>9yoxaoc36j8abuehiac7c5h39giexdb</sha1>
    </revision>
    <revision>
      <id>2343</id>
      <parentid>2342</parentid>
      <timestamp>2018-09-15T14:20:02Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Read csv file */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27900">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
''' Explanation for Code '''
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Data of GPS locations in .csv file ===
Contents of route.csv

Data as shared by Amit sir, is in the following format.
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;
---

''' Read csv file '''
Import the csv module and using the reader get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module gmplot is available or not on python shell
#if not available, install it using pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>o58fpzt9loqmizp9w247i7xksfn5ufa</sha1>
    </revision>
    <revision>
      <id>2344</id>
      <parentid>2343</parentid>
      <timestamp>2018-09-15T14:25:00Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Data of GPS locations in .csv file */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27973">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker By Ms.Ami Tusharkant Choksi ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable easily, if places of those locations with names as text and map is shown, humans can understand very easily. That's what we are implementing here. 
''' Explanation for Code '''
---
To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
&lt;li&gt;generate HTML file, that contains the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;browser wherein we will see output&lt;/li&gt;
&lt;/ul&gt;
---

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Use of gmplot module ===
Check whether gmplot is installed or not on your system. For that on your python shell, write, 
&lt;pre&gt;
from gmplot import gmplot
&lt;/pre&gt;
If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
&lt;pre&gt;
pip3 install gmplot
&lt;/pre&gt;
on Ubuntu or linux compatible machines. The required code for generating HTML file, from google map is as follows:
&lt;pre&gt;

# import gmplot package 
import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module gmplot is available or not on python shell
#if not available, install it using pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>emz796478wa2mpudc26g81kv7ch9sch</sha1>
    </revision>
    <revision>
      <id>2345</id>
      <parentid>2344</parentid>
      <timestamp>2018-09-15T14:36:01Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* GPS Tracker By Ms.Ami Tusharkant Choksi */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27802">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot   &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot  on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;



import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module gmplot is available or not on python shell
#if not available, install it using pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>fyu6xcvnddlxv40rokhgim65tyl7i8z</sha1>
    </revision>
    <revision>
      <id>2346</id>
      <parentid>2345</parentid>
      <timestamp>2018-09-15T14:36:49Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27817">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     &lt;b&gt;from gmplot import gmplot  &lt;/b&gt; &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     &lt;b&gt;pip3 install gmplot &lt;/b&gt;  on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;



import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module gmplot is available or not on python shell
#if not available, install it using pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>3xvhpnsi7qepog1qkdcj745esaiu4hy</sha1>
    </revision>
    <revision>
      <id>2347</id>
      <parentid>2346</parentid>
      <timestamp>2018-09-15T14:38:03Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27800">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;



import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
#check if module gmplot is available or not on python shell
#if not available, install it using pip3 install gmplot        

from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>6y6tqdh2od9ajt28j867ugcfvgdcmp8</sha1>
    </revision>
    <revision>
      <id>2348</id>
      <parentid>2347</parentid>
      <timestamp>2018-09-15T14:40:48Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27754">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;



import gmplot 
  
# GoogleMapPlotter return Map object 
# Pass the center latitude and 
# center longitude 
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)
#set icon set Google marker icon
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;

gmap.marker(lat,long,'yellow') #setting the marker of yellow color for start
&lt;/pre&gt; 
Setting the marker for start as &lt;font color=yellow&gt;yellow&lt;/font&gt; color, last as &lt;font color=red&gt;red&lt;/font&gt; and others as &lt;font color=blue&gt;blue&lt;/font&gt; color.
&lt;br&gt; Generate the HTML file that has the google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file

&lt;pre&gt;gmap.draw(&quot;mymap.html&quot;)&lt;/pre&gt;
---

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>j8wauqshi0z15ez2jy2god6g56qym8s</sha1>
    </revision>
    <revision>
      <id>2349</id>
      <parentid>2348</parentid>
      <timestamp>2018-09-15T14:42:07Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Reading data of GPS locations */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27116">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')
            k=1
        else:
            gmap.marker(lat,long,'blue')
        gmap.marker(lat,long,'red')            
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>a4gf48hlkcwcv3l38kccoewczu0a4gq</sha1>
    </revision>
    <revision>
      <id>2350</id>
      <parentid>2349</parentid>
      <timestamp>2018-09-15T14:45:29Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27320">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>n9f1ljets7wgdwcwvyu78zgf037w6ne</sha1>
    </revision>
    <revision>
      <id>2351</id>
      <parentid>2350</parentid>
      <timestamp>2018-09-15T14:47:54Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27428">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of &lt;i&gt;route.csv&lt;/i&gt;
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>e2n6dtc4ni6mkafr9e0cpcakgcqf332</sha1>
    </revision>
    <revision>
      <id>2352</id>
      <parentid>2351</parentid>
      <timestamp>2018-09-15T14:48:57Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27423">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

=== Output of mymap.html ===
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>r06cjg4rfsrpmuwpcbip8l1613t8nht</sha1>
    </revision>
    <revision>
      <id>2353</id>
      <parentid>2352</parentid>
      <timestamp>2018-09-15T14:49:36Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Output of mymap.html */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27423">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''
Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>1386wnxguek0m2lificr1tmgjggh7nm</sha1>
    </revision>
    <revision>
      <id>2354</id>
      <parentid>2353</parentid>
      <timestamp>2018-09-15T14:51:09Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27424">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        #print(lat)
        #print(long)
        #print()
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>ip0k9jaxe9v05r4fisi7tjkst6nohff</sha1>
    </revision>
    <revision>
      <id>2355</id>
      <parentid>2354</parentid>
      <timestamp>2018-09-15T22:51:58Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27366">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    '''
    k=index of starting row
    l=index of starting column '''
    while(k&lt;m and l&lt;n):
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>dhm98cfwpvp3dvddvlt9vpjisb4p1uo</sha1>
    </revision>
    <revision>
      <id>2356</id>
      <parentid>2355</parentid>
      <timestamp>2018-09-15T22:54:23Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27379">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>bf5lv7yji3hkcmdgkkeco0gdpb0vp6u</sha1>
    </revision>
    <revision>
      <id>2358</id>
      <parentid>2356</parentid>
      <timestamp>2018-09-16T01:06:53Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28443">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Anaconda ==
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. It can:

    Query and search the Anaconda package index and current Anaconda installation.
    Create new conda environments.
    Install and update packages into existing conda environments.

===conda commands ===
The following commands can be run in your Terminal window or an Anaconda Prompt
&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;/td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;/td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;





== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>t5bnj04t3wmghw2w9gtxh7a1ni5pc0a</sha1>
    </revision>
    <revision>
      <id>2359</id>
      <parentid>2358</parentid>
      <timestamp>2018-09-16T01:16:34Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* conda commands */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29183">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Anaconda ==
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. It can:

    Query and search the Anaconda package index and current Anaconda installation.
    Create new conda environments.
    Install and update packages into existing conda environments.

===conda commands ===
The following commands can be run in your Terminal window or an Anaconda Prompt
&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

'''Package'''

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

&lt;b&gt;Download a Package &lt;/b&gt;

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate the command line to the location of Python's script directory, and type the following:
&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>62oex6bwe71fm4jijkr54i3x1hxgvcq</sha1>
    </revision>
    <revision>
      <id>2360</id>
      <parentid>2359</parentid>
      <timestamp>2018-09-16T01:18:40Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* conda commands */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29183">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Anaconda ==
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. It can:

    Query and search the Anaconda package index and current Anaconda installation.
    Create new conda environments.
    Install and update packages into existing conda environments.

'''conda commands '''
The following commands can be run in your Terminal window or an Anaconda Prompt
&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

'''Package'''

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

&lt;b&gt;Download a Package &lt;/b&gt;

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate the command line to the location of Python's script directory, and type the following:
&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>nyfxwqofdaj29e8lqdsd2s7jn3zz3o5</sha1>
    </revision>
    <revision>
      <id>2361</id>
      <parentid>2360</parentid>
      <timestamp>2018-09-16T01:25:32Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Anaconda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29291">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Anaconda ==

Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux.

It can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

'''Package'''

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

&lt;b&gt;Download a Package &lt;/b&gt;

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate the command line to the location of Python's script directory, and type the following:
&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>ruxla69a3tuk535byp6mj0lah4jjry8</sha1>
    </revision>
    <revision>
      <id>2362</id>
      <parentid>2361</parentid>
      <timestamp>2018-09-16T01:27:11Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Anaconda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29342">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Conda ==

Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

'''Package'''

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

&lt;b&gt;Download a Package &lt;/b&gt;

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate the command line to the location of Python's script directory, and type the following:
&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>onio79nm3mmc1ia1wawfspgz7o611si</sha1>
    </revision>
    <revision>
      <id>2363</id>
      <parentid>2362</parentid>
      <timestamp>2018-09-16T01:34:18Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Conda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29580">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Conda ==

Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


'''Package'''

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

&lt;b&gt;Download a Package &lt;/b&gt;

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate the command line to the location of Python's script directory, and type the following:
&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>radas1imdgyw8e3pe72ky4jb3od6sin</sha1>
    </revision>
    <revision>
      <id>2364</id>
      <parentid>2363</parentid>
      <timestamp>2018-09-16T01:41:22Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Conda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29855">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Conda ==

Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


'''Package'''

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

&lt;b&gt;Download a Package &lt;/b&gt;

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>9kvvdygo94lv2unry5l1ntm7skk4cn3</sha1>
    </revision>
    <revision>
      <id>2365</id>
      <parentid>2364</parentid>
      <timestamp>2018-09-16T01:47:40Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Conda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29898">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
 PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

&lt;b&gt;Download a Package &lt;/b&gt;

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>ja4x5dzbwbj0mkxq60izp0i2zaxrjq9</sha1>
    </revision>
    <revision>
      <id>2366</id>
      <parentid>2365</parentid>
      <timestamp>2018-09-16T01:48:51Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* PIP */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29900">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
 If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

&lt;b&gt;Download a Package &lt;/b&gt;

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>5bfjhm6b7965hyr82ecne38czez5h94</sha1>
    </revision>
    <revision>
      <id>2367</id>
      <parentid>2366</parentid>
      <timestamp>2018-09-16T01:49:44Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* PIP */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29898">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
We want to track a person. For that, GPS(Global Positioning System) tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the google map of the places at these geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>e5dmhtkit4o6yskc8iv4ne0c9nmy0zv</sha1>
    </revision>
    <revision>
      <id>2368</id>
      <parentid>2367</parentid>
      <timestamp>2018-09-16T01:54:19Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30018">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>7d9u38c0grf0t0cm10viy2sy1fos1t2</sha1>
    </revision>
    <revision>
      <id>2369</id>
      <parentid>2368</parentid>
      <timestamp>2018-09-16T01:58:31Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Graphics Using turtle */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30022">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snake and Ladder By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>pz3p6d3gdd51ksa480hp5vzo8nx17ns</sha1>
    </revision>
    <revision>
      <id>2893</id>
      <parentid>2369</parentid>
      <timestamp>2018-09-20T09:30:45Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Snake and Ladder By Sachin */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30024">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>4d29nybdbcpgc4qrp7mtf66ejvuzk7h</sha1>
    </revision>
    <revision>
      <id>2894</id>
      <parentid>2893</parentid>
      <timestamp>2018-09-20T09:31:18Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Snakes and Ladders By Sachin */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30025">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>7rz4xyd2mkbsesegwom3s0mesusjiyv</sha1>
    </revision>
    <revision>
      <id>2896</id>
      <parentid>2894</parentid>
      <timestamp>2018-09-20T09:36:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31750">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    print('''  SSSSSSSSSSSSSSS                                   kkkkkkkk                                             
 SS:::::::::::::::S                                  k::::::k                                             
S:::::SSSSSS::::::S                                  k::::::k                                             
S:::::S     SSSSSSS                                  k::::::k                                             
S:::::S          nnnn  nnnnnnnn      aaaaaaaaaaaaa    k:::::k    kkkkkkk eeeeeeeeeeee        ssssssssss   
S:::::S          n:::nn::::::::nn    a::::::::::::a   k:::::k   k:::::kee::::::::::::ee    ss::::::::::s  
 S::::SSSS       n::::::::::::::nn   aaaaaaaaa:::::a  k:::::k  k:::::ke::::::eeeee:::::eess:::::::::::::s 
  SS::::::SSSSS  nn:::::::::::::::n           a::::a  k:::::k k:::::ke::::::e     e:::::es::::::ssss:::::s
    SSS::::::::SS  n:::::nnnn:::::n    aaaaaaa:::::a  k::::::k:::::k e:::::::eeeee::::::e s:::::s  ssssss 
       SSSSSS::::S n::::n    n::::n  aa::::::::::::a  k:::::::::::k  e:::::::::::::::::e    s::::::s      
            S:::::Sn::::n    n::::n a::::aaaa::::::a  k:::::::::::k  e::::::eeeeeeeeeee        s::::::s   
            S:::::Sn::::n    n::::na::::a    a:::::a  k::::::k:::::k e:::::::e           ssssss   s:::::s 
SSSSSSS     S:::::Sn::::n    n::::na::::a    a:::::a k::::::k k:::::ke::::::::e          s:::::ssss::::::s
S::::::SSSSSS:::::Sn::::n    n::::na:::::aaaa::::::a k::::::k  k:::::ke::::::::eeeeeeee  s::::::::::::::s 
S:::::::::::::::SS n::::n    n::::n a::::::::::aa:::ak::::::k   k:::::kee:::::::::::::e   s:::::::::::ss  
 SSSSSSSSSSSSSSS   nnnnnn    nnnnnn  aaaaaaaaaa  aaaakkkkkkkk    kkkkkkk eeeeeeeeeeeeee    sssssssssss ''')
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>6zsmmvw9jc8lvzl0ef12l5v5gqtb56u</sha1>
    </revision>
    <revision>
      <id>2897</id>
      <parentid>2896</parentid>
      <timestamp>2018-09-20T09:40:22Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31925">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    print('''    o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
                                                                     ''')
    print('''                                 o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ ''')
    print(''' o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>cfkancgmdkgse5h9tfwedcgyko7bjq2</sha1>
    </revision>
    <revision>
      <id>2898</id>
      <parentid>2897</parentid>
      <timestamp>2018-09-20T09:41:07Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31931">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
    print('''    
     o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
                                                                     ''')
    print('''                                 o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ ''')
    print(''' o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>n3qxon60vns6yrf4q37v5s4uf9klcvb</sha1>
    </revision>
    <revision>
      <id>2899</id>
      <parentid>2898</parentid>
      <timestamp>2018-09-20T09:41:44Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30028">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()    
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>4bkxr2bmoae14sdx4na19txg3hx0fia</sha1>
    </revision>
    <revision>
      <id>2901</id>
      <parentid>2899</parentid>
      <timestamp>2018-09-20T09:44:56Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31848">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----
== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>oa0pygcedb9zrn0m8sslgx7q5c9qprn</sha1>
    </revision>
    <revision>
      <id>2902</id>
      <parentid>2901</parentid>
      <timestamp>2018-09-20T09:46:19Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Sample Output */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33549">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>fjhp8gbgsal1sgt5uoqz8z480t8c4nm</sha1>
    </revision>
    <revision>
      <id>2904</id>
      <parentid>2902</parentid>
      <timestamp>2018-09-20T10:05:45Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Sample Output */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33550">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>hei2pwxlhnuc2bugllm3scie65xyblc</sha1>
    </revision>
    <revision>
      <id>2913</id>
      <parentid>2904</parentid>
      <timestamp>2018-09-20T10:21:21Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33551">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if 
point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
'''
A small request to whoever has written this code. Could you please try explaining it more properly ? As far as I understand, you should be using the snakes and ladders specified in your image or else you shouldn't show your image at all. Also, as per your code, each time check_snakeLadder() is called, the snake and ladder will be defined randomly, which could be rephrased as, any snake or ladder that was at a certain point in the last move may or may not be there in the current move. This could result in some serious advantage/disadvantage for the players. Let me explain this by an example : 
Suppose P1 rolls the dice and goes to 25, check_snakeLadder() is called, suppose he gets a ladder(snakeLadder=20,divisor=4) which is obviously random. Now P2 rolls the dice and goes to 25, check_snakeLadder() is called, and maybe now, not only there is no ladder, but also the snake(snakeLadder=27,divisor=7), as per your code, not only the player will not go ahead but also his points will be reset to 0. Who does that to a player who came to enjoy your game ?
'''
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>5tg3np0rytpxgmxo6cvirpd0q586b87</sha1>
    </revision>
    <revision>
      <id>2915</id>
      <parentid>2913</parentid>
      <timestamp>2018-09-20T10:23:09Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Check for Snake or Ladder, End */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32481">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if 
point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder, End ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>b752wxcf3qb2emixq0s3nuk1y79lcr5</sha1>
    </revision>
    <revision>
      <id>2931</id>
      <parentid>2915</parentid>
      <timestamp>2018-09-20T10:38:36Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Check for Snake or Ladder, End */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32476">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if 
point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

py -3 -m pip install gmplot

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>9yinbraszmbmt8ad8nlrc792agp4dxc</sha1>
    </revision>
    <revision>
      <id>2936</id>
      <parentid>2931</parentid>
      <timestamp>2018-09-21T01:11:06Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Package Management System - Conda &amp; PIP */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33018">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if 
point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]

==== Code ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. If you have Python installed via Anaconda package manager, you can install the required modules using the command conda install. For example, to install pandas, you would execute the command - '''conda install pandas'''.

If you already have a regular, non-Anaconda Python installed on the computer, you can install the required modules using pip. Open your command line program and execute command '''pip install &lt;module name&gt;''' to install a module.  For example, to install pandas, you would execute command - pip install pandas.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

&lt;b&gt; py -3 -m pip install gmplot &lt;/b&gt;

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>g17wjiwauq9nxk6nqc4cvtg64ezm2wl</sha1>
    </revision>
    <revision>
      <id>2941</id>
      <parentid>2936</parentid>
      <timestamp>2018-09-21T02:28:46Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Spiral Traversal of Matrix Graphically */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35276">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if 
point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]
==== Example1 ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
====Example 2 ====
&lt;pre&gt;
import turtle
def j ():
    sac.pencolor(0.2,0.3,0.5)           # Here we chnaged pen color with R,G,B vlues. You can use hexadecimal too
    sac.penup()                         # Here pen will stop writing as dont want any extralines while moving to new position
    sac.setpos(-200,250)                # Turtle will move to -200, 250 coordinates
    sac.pendown()                       # Here we put pen down as we are ready to draw
    sac.forward(100)                    # It will draw line upto 100points along X axis
    sac.penup                           # We stop writing to aviod overwriting as we are moving backward in next step
    sac.backward(50)                    # It will move turtle backward uto 50 points along X axis
    sac.right(90)                       # As we move backward but turtle still facing +ve x axis so we move his face toward -ve Y axis by roating 90 deegree
    sac.pendown()                       # We put the pen down again as we are ready to write
    sac.forward(75)
    sac.circle(-16.65, 90)              # It will draw a circle if Radius -16.65 with arc of 90 deegree. If you give only radius it will create full circle
    sac.forward(16.6)
    sac.circle(-16.6, 90)
    sac.forward(10)
    sac.rt(90)                          # Here we reset the turtle facing direction back to =ve X axis
    return

def o():
    sac.pencolor(0.7,0.3,0.8)
    sac.penup()
    sac.setpos(-50,250)
    sac.pendown()
    for i in range(2):
        sac.fd(25)
      #  sac.rt(90)
        sac.circle(-25, 90)
        sac.fd(50)
        sac.circle(-25, 90)
    return
def c():
    sac.pencolor(0.7,0.5,0.3)
    sac.penup()
    sac.setpos(100,250)
    sac.pendown()
    sac.rt(180)
    for i in range(2):
        sac.fd(50)
        sac.circle(25, 90)
    sac.fd(50)
    return

sac = turtle.Turtle()
sac.pensize(15)                         # It will set pen tip width to 15 
sac.shape(&quot;turtle&quot;)                     # It will set pen shape to turtle
sac.speed(1)                            # It will set pen moving speed to 1 default is 6
turtle.write(&quot;JOC WIKI \n Project&quot;, move=True, align=&quot;center&quot;, font=(&quot;Arial&quot;, 20, &quot;bold&quot;))
j()
o()
c()
turtle.done()
&lt;/pre&gt;

&lt;big&gt;'''Output:'''&lt;/big&gt; 
[[File:JOC.jpg]]

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. If you have Python installed via Anaconda package manager, you can install the required modules using the command conda install. For example, to install pandas, you would execute the command - '''conda install pandas'''.

If you already have a regular, non-Anaconda Python installed on the computer, you can install the required modules using pip. Open your command line program and execute command '''pip install &lt;module name&gt;''' to install a module.  For example, to install pandas, you would execute command - pip install pandas.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

&lt;b&gt; py -3 -m pip install gmplot &lt;/b&gt;

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
For example, we want to track the route made by a  person. For that, GPS tracker is useful. The output of GPS tracker is in the form of latitude and longitude. They are the real numbers, that we cannot understand easily. To make it understandable, a Python program is implemented to show the Google map of the geographic locations. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>mmy8a87uo1wkzcx34jeb97eo9xoo25x</sha1>
    </revision>
    <revision>
      <id>2949</id>
      <parentid>2941</parentid>
      <timestamp>2018-09-21T06:51:01Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35317">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if 
point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]
==== Example1 ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
====Example 2 ====
&lt;pre&gt;
import turtle
def j ():
    sac.pencolor(0.2,0.3,0.5)           # Here we chnaged pen color with R,G,B vlues. You can use hexadecimal too
    sac.penup()                         # Here pen will stop writing as dont want any extralines while moving to new position
    sac.setpos(-200,250)                # Turtle will move to -200, 250 coordinates
    sac.pendown()                       # Here we put pen down as we are ready to draw
    sac.forward(100)                    # It will draw line upto 100points along X axis
    sac.penup                           # We stop writing to aviod overwriting as we are moving backward in next step
    sac.backward(50)                    # It will move turtle backward uto 50 points along X axis
    sac.right(90)                       # As we move backward but turtle still facing +ve x axis so we move his face toward -ve Y axis by roating 90 deegree
    sac.pendown()                       # We put the pen down again as we are ready to write
    sac.forward(75)
    sac.circle(-16.65, 90)              # It will draw a circle if Radius -16.65 with arc of 90 deegree. If you give only radius it will create full circle
    sac.forward(16.6)
    sac.circle(-16.6, 90)
    sac.forward(10)
    sac.rt(90)                          # Here we reset the turtle facing direction back to =ve X axis
    return

def o():
    sac.pencolor(0.7,0.3,0.8)
    sac.penup()
    sac.setpos(-50,250)
    sac.pendown()
    for i in range(2):
        sac.fd(25)
      #  sac.rt(90)
        sac.circle(-25, 90)
        sac.fd(50)
        sac.circle(-25, 90)
    return
def c():
    sac.pencolor(0.7,0.5,0.3)
    sac.penup()
    sac.setpos(100,250)
    sac.pendown()
    sac.rt(180)
    for i in range(2):
        sac.fd(50)
        sac.circle(25, 90)
    sac.fd(50)
    return

sac = turtle.Turtle()
sac.pensize(15)                         # It will set pen tip width to 15 
sac.shape(&quot;turtle&quot;)                     # It will set pen shape to turtle
sac.speed(1)                            # It will set pen moving speed to 1 default is 6
turtle.write(&quot;JOC WIKI \n Project&quot;, move=True, align=&quot;center&quot;, font=(&quot;Arial&quot;, 20, &quot;bold&quot;))
j()
o()
c()
turtle.done()
&lt;/pre&gt;

&lt;big&gt;'''Output:'''&lt;/big&gt; 
[[File:JOC.jpg]]

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. If you have Python installed via Anaconda package manager, you can install the required modules using the command conda install. For example, to install pandas, you would execute the command - '''conda install pandas'''.

If you already have a regular, non-Anaconda Python installed on the computer, you can install the required modules using pip. Open your command line program and execute command '''pip install &lt;module name&gt;''' to install a module.  For example, to install pandas, you would execute command - pip install pandas.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

&lt;b&gt; py -3 -m pip install gmplot &lt;/b&gt;

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
 Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
 '''For Example:''' We want to track the route followed by a person. GPS tracker will be very useful in such case. The output of GPS tracker is in the form of latitude and longitude. 
 They are the real numbers(geographical coordinates), that we cannot understand easily. To make it understandable, a Python program is implemented to show geographic locations on the Map. 

''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>betqjr5walgb0wsy0d2i83uqj0hzkgt</sha1>
    </revision>
    <revision>
      <id>2950</id>
      <parentid>2949</parentid>
      <timestamp>2018-09-21T06:51:28Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Introduction */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35318">
== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if 
point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]
==== Example1 ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
====Example 2 ====
&lt;pre&gt;
import turtle
def j ():
    sac.pencolor(0.2,0.3,0.5)           # Here we chnaged pen color with R,G,B vlues. You can use hexadecimal too
    sac.penup()                         # Here pen will stop writing as dont want any extralines while moving to new position
    sac.setpos(-200,250)                # Turtle will move to -200, 250 coordinates
    sac.pendown()                       # Here we put pen down as we are ready to draw
    sac.forward(100)                    # It will draw line upto 100points along X axis
    sac.penup                           # We stop writing to aviod overwriting as we are moving backward in next step
    sac.backward(50)                    # It will move turtle backward uto 50 points along X axis
    sac.right(90)                       # As we move backward but turtle still facing +ve x axis so we move his face toward -ve Y axis by roating 90 deegree
    sac.pendown()                       # We put the pen down again as we are ready to write
    sac.forward(75)
    sac.circle(-16.65, 90)              # It will draw a circle if Radius -16.65 with arc of 90 deegree. If you give only radius it will create full circle
    sac.forward(16.6)
    sac.circle(-16.6, 90)
    sac.forward(10)
    sac.rt(90)                          # Here we reset the turtle facing direction back to =ve X axis
    return

def o():
    sac.pencolor(0.7,0.3,0.8)
    sac.penup()
    sac.setpos(-50,250)
    sac.pendown()
    for i in range(2):
        sac.fd(25)
      #  sac.rt(90)
        sac.circle(-25, 90)
        sac.fd(50)
        sac.circle(-25, 90)
    return
def c():
    sac.pencolor(0.7,0.5,0.3)
    sac.penup()
    sac.setpos(100,250)
    sac.pendown()
    sac.rt(180)
    for i in range(2):
        sac.fd(50)
        sac.circle(25, 90)
    sac.fd(50)
    return

sac = turtle.Turtle()
sac.pensize(15)                         # It will set pen tip width to 15 
sac.shape(&quot;turtle&quot;)                     # It will set pen shape to turtle
sac.speed(1)                            # It will set pen moving speed to 1 default is 6
turtle.write(&quot;JOC WIKI \n Project&quot;, move=True, align=&quot;center&quot;, font=(&quot;Arial&quot;, 20, &quot;bold&quot;))
j()
o()
c()
turtle.done()
&lt;/pre&gt;

&lt;big&gt;'''Output:'''&lt;/big&gt; 
[[File:JOC.jpg]]

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. If you have Python installed via Anaconda package manager, you can install the required modules using the command conda install. For example, to install pandas, you would execute the command - '''conda install pandas'''.

If you already have a regular, non-Anaconda Python installed on the computer, you can install the required modules using pip. Open your command line program and execute command '''pip install &lt;module name&gt;''' to install a module.  For example, to install pandas, you would execute command - pip install pandas.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

&lt;b&gt; py -3 -m pip install gmplot &lt;/b&gt;

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
 Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
 '''For Example:''' We want to track the route followed by a person. GPS tracker will be very useful in such case. The output of GPS tracker is in the form of latitude and longitude. 
 They are the real numbers(geographical coordinates), that we cannot understand easily. To make it understandable, a Python program is implemented to show geographic locations on the Map. 


''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>8y9c609a1i5zx4xsxajtah084rcbcas</sha1>
    </revision>
    <revision>
      <id>2971</id>
      <parentid>2950</parentid>
      <timestamp>2018-09-23T00:10:45Z</timestamp>
      <contributor>
        <username>Saurav</username>
        <id>2056</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="41614">===snakes and ladders By Saurav kumar===
====INTRODUCTION====
The following code is written for playing snakes and ladders game with computer with some interesting rules.

RULES:
1. initially computer and you both are at position 0.
2. initialing condition: player can't start the Game until dice shows 1(i.e your position is 0 until dice shows 1)   
3. after initialing position of player change according to dice shows
4. if dice show 1 then player get one more chance to roll the dice again.
    eg- if you get 1 and then 6 then your position is increase by 7.
5. if player get three 1 continuously  it will vanish .
   eg- if dice shows 1,1,1,4 then your position is increase by 4 only.
6. if dice  show show something and player position become greater then 100 then position is not increase.
   eg.you are at position 98 and dice shows 3 then your position remain 98.
7. rest rules are same.

========code=======

import time 
import random 
#from PIL import Image 
end=100 
def dice(ds):
   if (ds==1):
      print ('__________')
      print ('|        |')
      print ('|   😭   |')
      print ('|        |')
      print ('----------')    
   elif (ds==2):
      print ('__________')
      print ('|   😟   |')
      print ('|        |')
      print ('|   😟   |')
      print ('----------')    
   elif (ds==3):
      print ('__________')
      print ('|   😮   |')
      print ('|   😮   |')
      print ('|   😮   |')
      print ('----------')    
   elif (ds==4):
      print ('__________')
      print ('| ☺  ☺ |')
      print ('|        |')
      print ('| ☺  ☺ |')
      print ('----------')    
   elif (ds==5):
      print ('___________')
      print ('| 😎   😎 |')
      print ('|    😎   |')
      print ('| 😎   😎 |')
      print ('-----------')    
   elif (ds==6):
      print ('____________')
      print ('| 😂 😂 😂 |')
      print ('|          |')
      print ('| 😂 😂 😂 |')
      print ('------------')    
   else:
      print ('press enter')   
                      
#def show board(): 
   #img=Image.open(&quot;D: Isnake_ladder.jpg&quot;)  &quot;&quot;&quot;   img. show() 
def check_ladder(ps): 
   if (ps==2): 
      print('Ladder') 
      return 23 
   elif (ps==7): 
      print('Ladder')
      return 29
   elif (ps==22): 
      print('Ladder')
      return 41 
   elif (ps==28): 
      print('Ladder')
      return 77
   elif (ps==30): 
      print('Ladder')
      return 32 
   elif (ps==44): 
      print('Ladder')
      return 58 
   elif (ps==54): 
      print('Ladder')
      return 69 
   elif (ps ==70): 
      print('Ladder')
      return 90 
   elif (ps==80):
      print('Ladder')
      return 83
   elif (ps==87):
      print('Ladder')
      return 93
   else:
      return ps
def check_snake(ps):
   if(ps==27):
      print(&quot;snake&quot;)
      return 7
   elif(ps==35):
      print(&quot;snake&quot;)
      return 5
   elif(ps==39):
      print(&quot;snake&quot;)
      return 3
   elif(ps==50):
      print(&quot;snake&quot;)
      return 34
   elif(ps==59):
      print(&quot;snake&quot;)
      return 46
   elif(ps==66):
      print(&quot;snake&quot;)
      return 24
   elif(ps==73):
      print(&quot;snake&quot;)
      return 12
   elif(ps==76):
      print(&quot;snake&quot;)
      return 63
   elif(ps==89):
      print(&quot;snake&quot;)
      return 67
   elif(ps==97):
      print(&quot;snake&quot;)
      return 86
   elif(ps==99):
      print(&quot;snake&quot;)
      return 26
   else:
      return ps

def reched_end(ps):
   if(ps==end):
      return True
   else:
      return False

def play():
   p1name=&quot;computer&quot;
   p2name=input(&quot;player please enter your name:&quot;)
   p1s=0
   p2s=0
   turn=0
   while ( 1 ) : # infinite loop 
      if ( turn%2==0) : 
         print(p1name, 'your turn') 
         time.sleep(2)
         ds=random.randint(1,6) 
         dice(ds)
         time.sleep(2)
         if (p1s==0 and ds&gt;1):
            p1s=0
         else: 
            p1s =p1s+ds # increment player 1 score 
         count=0
         while(ds==1):
            count+=1
            ds=random.randint (1,6)
            dice(ds)
            if (p1s==0 and ds&gt;1):
               p1s=0
            else: 
               p1s =p1s+ds            
            if (count==3):
               count=0
               p1s-=3               
         if p1s &gt; end: 
            p1s=p1s-(ds+count)       
         p1s=check_ladder(p1s) 
         p1s=check_snake(p1s) 
         print (p1name,'your score :',p1s) 
         time.sleep(2)
         if (reched_end(p1s)): 
            print (p1name, 'win') 
            break 
      else: 
         print(p2name,'your turn') 
         C=input(&quot;press enter for rolling the dice:&quot;) 
         if(C=='n'):
            print(p1name, &quot;your score:&quot;,p1s) 
            print(p2name, &quot;your score:&quot;,p2s) 
            print(&quot;Thanks for playing. \n have a nice day.&quot;) 
            break 
         ds=random.randint(1,6) 
         dice(ds)
         time.sleep(2)
         if (p2s==0 and ds&gt;1):
            p2s=0
         else:   
            p2s=p2s+ds#increment player 2 score 
         count=0
         while ds==1:
            count+=1
            C=input(&quot;press enter to rolling the die again:&quot;)
            ds=random.randint (1,6)
            dice(ds)
            if (p2s==0 and ds&gt;1):
               p2s=0
            else:   
               p2s=p2s+ds
            if (count==3):
               count=0
               p2s-=3        
         if(p2s&gt;end): 
            p2s=p2s-(ds+count)                                  
         p2s=check_ladder(p2s) 
         p2s=check_snake(p2s)  
         print (p2name,'your score:',p2s) 
         time.sleep(2)
         if (reched_end(p2s)): 
            print(p2name, 'win.') 
            break 
      turn+=1
play()

====output====

player please enter your name:saurav
computer your turn
__________
|   😟   |
|        |
|   😟   |
----------
computer your score : 0
saurav your turn

press enter for rolling the dice:
___________
| 😎   😎 |
|    😎   |
| 😎   😎 |
-----------
saurav your score: 0
computer your turn
__________
|        |
|   😭   |
|        |
----------
____________
== Headline text ==

| 😂 😂 😂 |
|          |
| 😂 😂 😂 |
------------
Ladder
computer your score : 29
saurav your turn

press enter for rolling the dice:
__________
|   😟   |
|        |
|   😟   |
----------
saurav your score: 0



== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if 
point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]
==== Example1 ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
====Example 2 ====
&lt;pre&gt;
import turtle
def j ():
    sac.pencolor(0.2,0.3,0.5)           # Here we chnaged pen color with R,G,B vlues. You can use hexadecimal too
    sac.penup()                         # Here pen will stop writing as dont want any extralines while moving to new position
    sac.setpos(-200,250)                # Turtle will move to -200, 250 coordinates
    sac.pendown()                       # Here we put pen down as we are ready to draw
    sac.forward(100)                    # It will draw line upto 100points along X axis
    sac.penup                           # We stop writing to aviod overwriting as we are moving backward in next step
    sac.backward(50)                    # It will move turtle backward uto 50 points along X axis
    sac.right(90)                       # As we move backward but turtle still facing +ve x axis so we move his face toward -ve Y axis by roating 90 deegree
    sac.pendown()                       # We put the pen down again as we are ready to write
    sac.forward(75)
    sac.circle(-16.65, 90)              # It will draw a circle if Radius -16.65 with arc of 90 deegree. If you give only radius it will create full circle
    sac.forward(16.6)
    sac.circle(-16.6, 90)
    sac.forward(10)
    sac.rt(90)                          # Here we reset the turtle facing direction back to =ve X axis
    return

def o():
    sac.pencolor(0.7,0.3,0.8)
    sac.penup()
    sac.setpos(-50,250)
    sac.pendown()
    for i in range(2):
        sac.fd(25)
      #  sac.rt(90)
        sac.circle(-25, 90)
        sac.fd(50)
        sac.circle(-25, 90)
    return
def c():
    sac.pencolor(0.7,0.5,0.3)
    sac.penup()
    sac.setpos(100,250)
    sac.pendown()
    sac.rt(180)
    for i in range(2):
        sac.fd(50)
        sac.circle(25, 90)
    sac.fd(50)
    return

sac = turtle.Turtle()
sac.pensize(15)                         # It will set pen tip width to 15 
sac.shape(&quot;turtle&quot;)                     # It will set pen shape to turtle
sac.speed(1)                            # It will set pen moving speed to 1 default is 6
turtle.write(&quot;JOC WIKI \n Project&quot;, move=True, align=&quot;center&quot;, font=(&quot;Arial&quot;, 20, &quot;bold&quot;))
j()
o()
c()
turtle.done()
&lt;/pre&gt;

&lt;big&gt;'''Output:'''&lt;/big&gt; 
[[File:JOC.jpg]]

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. If you have Python installed via Anaconda package manager, you can install the required modules using the command conda install. For example, to install pandas, you would execute the command - '''conda install pandas'''.

If you already have a regular, non-Anaconda Python installed on the computer, you can install the required modules using pip. Open your command line program and execute command '''pip install &lt;module name&gt;''' to install a module.  For example, to install pandas, you would execute command - pip install pandas.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

&lt;b&gt; py -3 -m pip install gmplot &lt;/b&gt;

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
 Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
 '''For Example:''' We want to track the route followed by a person. GPS tracker will be very useful in such case. The output of GPS tracker is in the form of latitude and longitude. 
 They are the real numbers(geographical coordinates), that we cannot understand easily. To make it understandable, a Python program is implemented to show geographic locations on the Map. 


''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>amcgbzk3i82ji9k9rb2ktcfzmo64rvq</sha1>
    </revision>
    <revision>
      <id>2972</id>
      <parentid>2971</parentid>
      <timestamp>2018-09-23T00:12:58Z</timestamp>
      <contributor>
        <username>Saurav</username>
        <id>2056</id>
      </contributor>
      <comment>/* Headline text */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="41592">===snakes and ladders By Saurav kumar===
====INTRODUCTION====
The following code is written for playing snakes and ladders game with computer with some interesting rules.

RULES:
1. initially computer and you both are at position 0.
2. initialing condition: player can't start the Game until dice shows 1(i.e your position is 0 until dice shows 1)   
3. after initialing position of player change according to dice shows
4. if dice show 1 then player get one more chance to roll the dice again.
    eg- if you get 1 and then 6 then your position is increase by 7.
5. if player get three 1 continuously  it will vanish .
   eg- if dice shows 1,1,1,4 then your position is increase by 4 only.
6. if dice  show show something and player position become greater then 100 then position is not increase.
   eg.you are at position 98 and dice shows 3 then your position remain 98.
7. rest rules are same.

========code=======

import time 
import random 
#from PIL import Image 
end=100 
def dice(ds):
   if (ds==1):
      print ('__________')
      print ('|        |')
      print ('|   😭   |')
      print ('|        |')
      print ('----------')    
   elif (ds==2):
      print ('__________')
      print ('|   😟   |')
      print ('|        |')
      print ('|   😟   |')
      print ('----------')    
   elif (ds==3):
      print ('__________')
      print ('|   😮   |')
      print ('|   😮   |')
      print ('|   😮   |')
      print ('----------')    
   elif (ds==4):
      print ('__________')
      print ('| ☺  ☺ |')
      print ('|        |')
      print ('| ☺  ☺ |')
      print ('----------')    
   elif (ds==5):
      print ('___________')
      print ('| 😎   😎 |')
      print ('|    😎   |')
      print ('| 😎   😎 |')
      print ('-----------')    
   elif (ds==6):
      print ('____________')
      print ('| 😂 😂 😂 |')
      print ('|          |')
      print ('| 😂 😂 😂 |')
      print ('------------')    
   else:
      print ('press enter')   
                      
#def show board(): 
   #img=Image.open(&quot;D: Isnake_ladder.jpg&quot;)  &quot;&quot;&quot;   img. show() 
def check_ladder(ps): 
   if (ps==2): 
      print('Ladder') 
      return 23 
   elif (ps==7): 
      print('Ladder')
      return 29
   elif (ps==22): 
      print('Ladder')
      return 41 
   elif (ps==28): 
      print('Ladder')
      return 77
   elif (ps==30): 
      print('Ladder')
      return 32 
   elif (ps==44): 
      print('Ladder')
      return 58 
   elif (ps==54): 
      print('Ladder')
      return 69 
   elif (ps ==70): 
      print('Ladder')
      return 90 
   elif (ps==80):
      print('Ladder')
      return 83
   elif (ps==87):
      print('Ladder')
      return 93
   else:
      return ps
def check_snake(ps):
   if(ps==27):
      print(&quot;snake&quot;)
      return 7
   elif(ps==35):
      print(&quot;snake&quot;)
      return 5
   elif(ps==39):
      print(&quot;snake&quot;)
      return 3
   elif(ps==50):
      print(&quot;snake&quot;)
      return 34
   elif(ps==59):
      print(&quot;snake&quot;)
      return 46
   elif(ps==66):
      print(&quot;snake&quot;)
      return 24
   elif(ps==73):
      print(&quot;snake&quot;)
      return 12
   elif(ps==76):
      print(&quot;snake&quot;)
      return 63
   elif(ps==89):
      print(&quot;snake&quot;)
      return 67
   elif(ps==97):
      print(&quot;snake&quot;)
      return 86
   elif(ps==99):
      print(&quot;snake&quot;)
      return 26
   else:
      return ps

def reched_end(ps):
   if(ps==end):
      return True
   else:
      return False

def play():
   p1name=&quot;computer&quot;
   p2name=input(&quot;player please enter your name:&quot;)
   p1s=0
   p2s=0
   turn=0
   while ( 1 ) : # infinite loop 
      if ( turn%2==0) : 
         print(p1name, 'your turn') 
         time.sleep(2)
         ds=random.randint(1,6) 
         dice(ds)
         time.sleep(2)
         if (p1s==0 and ds&gt;1):
            p1s=0
         else: 
            p1s =p1s+ds # increment player 1 score 
         count=0
         while(ds==1):
            count+=1
            ds=random.randint (1,6)
            dice(ds)
            if (p1s==0 and ds&gt;1):
               p1s=0
            else: 
               p1s =p1s+ds            
            if (count==3):
               count=0
               p1s-=3               
         if p1s &gt; end: 
            p1s=p1s-(ds+count)       
         p1s=check_ladder(p1s) 
         p1s=check_snake(p1s) 
         print (p1name,'your score :',p1s) 
         time.sleep(2)
         if (reched_end(p1s)): 
            print (p1name, 'win') 
            break 
      else: 
         print(p2name,'your turn') 
         C=input(&quot;press enter for rolling the dice:&quot;) 
         if(C=='n'):
            print(p1name, &quot;your score:&quot;,p1s) 
            print(p2name, &quot;your score:&quot;,p2s) 
            print(&quot;Thanks for playing. \n have a nice day.&quot;) 
            break 
         ds=random.randint(1,6) 
         dice(ds)
         time.sleep(2)
         if (p2s==0 and ds&gt;1):
            p2s=0
         else:   
            p2s=p2s+ds#increment player 2 score 
         count=0
         while ds==1:
            count+=1
            C=input(&quot;press enter to rolling the die again:&quot;)
            ds=random.randint (1,6)
            dice(ds)
            if (p2s==0 and ds&gt;1):
               p2s=0
            else:   
               p2s=p2s+ds
            if (count==3):
               count=0
               p2s-=3        
         if(p2s&gt;end): 
            p2s=p2s-(ds+count)                                  
         p2s=check_ladder(p2s) 
         p2s=check_snake(p2s)  
         print (p2name,'your score:',p2s) 
         time.sleep(2)
         if (reched_end(p2s)): 
            print(p2name, 'win.') 
            break 
      turn+=1
play()

====output====

player please enter your name:saurav
computer your turn
__________
|   😟   |
|        |
|   😟   |
----------
computer your score : 0
saurav your turn

press enter for rolling the dice:
___________
| 😎   😎 |
|    😎   |
| 😎   😎 |
-----------
saurav your score: 0
computer your turn
__________
|        |
|   😭   |
|        |
----------
____________

| 😂 😂 😂 |
|          |
| 😂 😂 😂 |
------------
Ladder
computer your score : 29
saurav your turn

press enter for rolling the dice:
__________
|   😟   |
|        |
|   😟   |
----------
saurav your score: 0

== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if 
point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]
==== Example1 ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
====Example 2 ====
&lt;pre&gt;
import turtle
def j ():
    sac.pencolor(0.2,0.3,0.5)           # Here we chnaged pen color with R,G,B vlues. You can use hexadecimal too
    sac.penup()                         # Here pen will stop writing as dont want any extralines while moving to new position
    sac.setpos(-200,250)                # Turtle will move to -200, 250 coordinates
    sac.pendown()                       # Here we put pen down as we are ready to draw
    sac.forward(100)                    # It will draw line upto 100points along X axis
    sac.penup                           # We stop writing to aviod overwriting as we are moving backward in next step
    sac.backward(50)                    # It will move turtle backward uto 50 points along X axis
    sac.right(90)                       # As we move backward but turtle still facing +ve x axis so we move his face toward -ve Y axis by roating 90 deegree
    sac.pendown()                       # We put the pen down again as we are ready to write
    sac.forward(75)
    sac.circle(-16.65, 90)              # It will draw a circle if Radius -16.65 with arc of 90 deegree. If you give only radius it will create full circle
    sac.forward(16.6)
    sac.circle(-16.6, 90)
    sac.forward(10)
    sac.rt(90)                          # Here we reset the turtle facing direction back to =ve X axis
    return

def o():
    sac.pencolor(0.7,0.3,0.8)
    sac.penup()
    sac.setpos(-50,250)
    sac.pendown()
    for i in range(2):
        sac.fd(25)
      #  sac.rt(90)
        sac.circle(-25, 90)
        sac.fd(50)
        sac.circle(-25, 90)
    return
def c():
    sac.pencolor(0.7,0.5,0.3)
    sac.penup()
    sac.setpos(100,250)
    sac.pendown()
    sac.rt(180)
    for i in range(2):
        sac.fd(50)
        sac.circle(25, 90)
    sac.fd(50)
    return

sac = turtle.Turtle()
sac.pensize(15)                         # It will set pen tip width to 15 
sac.shape(&quot;turtle&quot;)                     # It will set pen shape to turtle
sac.speed(1)                            # It will set pen moving speed to 1 default is 6
turtle.write(&quot;JOC WIKI \n Project&quot;, move=True, align=&quot;center&quot;, font=(&quot;Arial&quot;, 20, &quot;bold&quot;))
j()
o()
c()
turtle.done()
&lt;/pre&gt;

&lt;big&gt;'''Output:'''&lt;/big&gt; 
[[File:JOC.jpg]]

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. If you have Python installed via Anaconda package manager, you can install the required modules using the command conda install. For example, to install pandas, you would execute the command - '''conda install pandas'''.

If you already have a regular, non-Anaconda Python installed on the computer, you can install the required modules using pip. Open your command line program and execute command '''pip install &lt;module name&gt;''' to install a module.  For example, to install pandas, you would execute command - pip install pandas.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

&lt;b&gt; py -3 -m pip install gmplot &lt;/b&gt;

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
 Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
 '''For Example:''' We want to track the route followed by a person. GPS tracker will be very useful in such case. The output of GPS tracker is in the form of latitude and longitude. 
 They are the real numbers(geographical coordinates), that we cannot understand easily. To make it understandable, a Python program is implemented to show geographic locations on the Map. 


''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>19av9lrpw728obl4lour3j6zbizydcw</sha1>
    </revision>
    <revision>
      <id>3342</id>
      <parentid>2972</parentid>
      <timestamp>2018-09-26T05:06:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="41702">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_7 Contributors of this page]

===snakes and ladders By Saurav kumar===
====INTRODUCTION====
The following code is written for playing snakes and ladders game with computer with some interesting rules.

RULES:
1. initially computer and you both are at position 0.
2. initialing condition: player can't start the Game until dice shows 1(i.e your position is 0 until dice shows 1)   
3. after initialing position of player change according to dice shows
4. if dice show 1 then player get one more chance to roll the dice again.
    eg- if you get 1 and then 6 then your position is increase by 7.
5. if player get three 1 continuously  it will vanish .
   eg- if dice shows 1,1,1,4 then your position is increase by 4 only.
6. if dice  show show something and player position become greater then 100 then position is not increase.
   eg.you are at position 98 and dice shows 3 then your position remain 98.
7. rest rules are same.

========code=======

import time 
import random 
#from PIL import Image 
end=100 
def dice(ds):
   if (ds==1):
      print ('__________')
      print ('|        |')
      print ('|   😭   |')
      print ('|        |')
      print ('----------')    
   elif (ds==2):
      print ('__________')
      print ('|   😟   |')
      print ('|        |')
      print ('|   😟   |')
      print ('----------')    
   elif (ds==3):
      print ('__________')
      print ('|   😮   |')
      print ('|   😮   |')
      print ('|   😮   |')
      print ('----------')    
   elif (ds==4):
      print ('__________')
      print ('| ☺  ☺ |')
      print ('|        |')
      print ('| ☺  ☺ |')
      print ('----------')    
   elif (ds==5):
      print ('___________')
      print ('| 😎   😎 |')
      print ('|    😎   |')
      print ('| 😎   😎 |')
      print ('-----------')    
   elif (ds==6):
      print ('____________')
      print ('| 😂 😂 😂 |')
      print ('|          |')
      print ('| 😂 😂 😂 |')
      print ('------------')    
   else:
      print ('press enter')   
                      
#def show board(): 
   #img=Image.open(&quot;D: Isnake_ladder.jpg&quot;)  &quot;&quot;&quot;   img. show() 
def check_ladder(ps): 
   if (ps==2): 
      print('Ladder') 
      return 23 
   elif (ps==7): 
      print('Ladder')
      return 29
   elif (ps==22): 
      print('Ladder')
      return 41 
   elif (ps==28): 
      print('Ladder')
      return 77
   elif (ps==30): 
      print('Ladder')
      return 32 
   elif (ps==44): 
      print('Ladder')
      return 58 
   elif (ps==54): 
      print('Ladder')
      return 69 
   elif (ps ==70): 
      print('Ladder')
      return 90 
   elif (ps==80):
      print('Ladder')
      return 83
   elif (ps==87):
      print('Ladder')
      return 93
   else:
      return ps
def check_snake(ps):
   if(ps==27):
      print(&quot;snake&quot;)
      return 7
   elif(ps==35):
      print(&quot;snake&quot;)
      return 5
   elif(ps==39):
      print(&quot;snake&quot;)
      return 3
   elif(ps==50):
      print(&quot;snake&quot;)
      return 34
   elif(ps==59):
      print(&quot;snake&quot;)
      return 46
   elif(ps==66):
      print(&quot;snake&quot;)
      return 24
   elif(ps==73):
      print(&quot;snake&quot;)
      return 12
   elif(ps==76):
      print(&quot;snake&quot;)
      return 63
   elif(ps==89):
      print(&quot;snake&quot;)
      return 67
   elif(ps==97):
      print(&quot;snake&quot;)
      return 86
   elif(ps==99):
      print(&quot;snake&quot;)
      return 26
   else:
      return ps

def reched_end(ps):
   if(ps==end):
      return True
   else:
      return False

def play():
   p1name=&quot;computer&quot;
   p2name=input(&quot;player please enter your name:&quot;)
   p1s=0
   p2s=0
   turn=0
   while ( 1 ) : # infinite loop 
      if ( turn%2==0) : 
         print(p1name, 'your turn') 
         time.sleep(2)
         ds=random.randint(1,6) 
         dice(ds)
         time.sleep(2)
         if (p1s==0 and ds&gt;1):
            p1s=0
         else: 
            p1s =p1s+ds # increment player 1 score 
         count=0
         while(ds==1):
            count+=1
            ds=random.randint (1,6)
            dice(ds)
            if (p1s==0 and ds&gt;1):
               p1s=0
            else: 
               p1s =p1s+ds            
            if (count==3):
               count=0
               p1s-=3               
         if p1s &gt; end: 
            p1s=p1s-(ds+count)       
         p1s=check_ladder(p1s) 
         p1s=check_snake(p1s) 
         print (p1name,'your score :',p1s) 
         time.sleep(2)
         if (reched_end(p1s)): 
            print (p1name, 'win') 
            break 
      else: 
         print(p2name,'your turn') 
         C=input(&quot;press enter for rolling the dice:&quot;) 
         if(C=='n'):
            print(p1name, &quot;your score:&quot;,p1s) 
            print(p2name, &quot;your score:&quot;,p2s) 
            print(&quot;Thanks for playing. \n have a nice day.&quot;) 
            break 
         ds=random.randint(1,6) 
         dice(ds)
         time.sleep(2)
         if (p2s==0 and ds&gt;1):
            p2s=0
         else:   
            p2s=p2s+ds#increment player 2 score 
         count=0
         while ds==1:
            count+=1
            C=input(&quot;press enter to rolling the die again:&quot;)
            ds=random.randint (1,6)
            dice(ds)
            if (p2s==0 and ds&gt;1):
               p2s=0
            else:   
               p2s=p2s+ds
            if (count==3):
               count=0
               p2s-=3        
         if(p2s&gt;end): 
            p2s=p2s-(ds+count)                                  
         p2s=check_ladder(p2s) 
         p2s=check_snake(p2s)  
         print (p2name,'your score:',p2s) 
         time.sleep(2)
         if (reched_end(p2s)): 
            print(p2name, 'win.') 
            break 
      turn+=1
play()

====output====

player please enter your name:saurav
computer your turn
__________
|   😟   |
|        |
|   😟   |
----------
computer your score : 0
saurav your turn

press enter for rolling the dice:
___________
| 😎   😎 |
|    😎   |
| 😎   😎 |
-----------
saurav your score: 0
computer your turn
__________
|        |
|   😭   |
|        |
----------
____________

| 😂 😂 😂 |
|          |
| 😂 😂 😂 |
------------
Ladder
computer your score : 29
saurav your turn

press enter for rolling the dice:
__________
|   😟   |
|        |
|   😟   |
----------
saurav your score: 0

== Snakes and Ladders By Ms.Ami Tusharkant Choksi ==
==== Introduction ====
Snakes and ladders is a very popular game. Two or more players can play the game together. 

'''Board:''' The game is having board with numbers ranging from 1 to 100. Snakes and ladders are placed on the board in any direction, ranging from any number to any other number on the board. 
&lt;br&gt;'''Player:''' Each player has to roll a dice. Position of player, 
e.g. player1's cookie will be placed on new position, i.e. calculated from 
&lt;pre&gt;new position=current position + diceNumber&lt;/pre&gt;

'''Snake or Ladder:''' There can be snake or ladder on the new position. If snake is there, user has to go down to the position of snake's tail. If ladder is there, user will reach to the position of top of the ladder.
'''Win or loose:''' A player who reaches the number 100 on the board first, wins the game.

=== Explanation for the Code: ===
Vidyamam, in the lecture, taught us to create a board by loading the image on it. How players play and their position on the board is getting incremented by the dice generated number. She left the code for checking snake/ladder for us, that too i have implemented here, with a simple logic. 
---
==== Show board ====
&lt;pre&gt;
#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
&lt;/pre&gt;
---
[[File:SNL.jpg]]
---

==== Play ====
Explanation: Playing is, one by one, user will roll a dice. i.e. here we will generate random no. For that importing &lt;i&gt;random&lt;/i&gt; is required. 
---
&lt;pre&gt;
#play
def play():
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=p1-dice  
'''for keeping the points of the player as it was before the dice was thrown, hence if 
point exceeds 100, the player won't win as in the real game'''
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=p2-dice #same reason as mentioned above
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
&lt;/pre&gt;
---

==== Check for Snake or Ladder ====
A simple logic i have implemented here, which, mam left, for us to implement.
When user rolls the dice, we will add new position to current position plus, number generated on dice. 
Now, we have to check whether, 
&lt;ol&gt;
&lt;li&gt;it is end or not, if it is end, the player wins.&lt;/li&gt;
&lt;pre&gt;
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
&lt;/pre&gt;
&lt;li&gt;it is snake, go down to the tail of snake&lt;/li&gt;
&lt;li&gt;it is ladder, to up to the top of ladder&lt;/li&gt;
&lt;pre&gt;
# a simple logic i have implemented here, which mam, left for us to implement
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
&lt;/pre&gt;
&lt;/ol&gt;

==== Code ====
&lt;pre&gt;
&quot;&quot;&quot;  Created on Tue Sep 11 11:59:28 2018  @author: amichoksi &quot;&quot;&quot;
from PIL import Image
import random
end=100

#show board image in a window
def show_board():
    img=Image.open('SNL.jpg')
    img.show()
#check reach end
def reached_end(p):
    if(p&gt;=end):
        return True
    return False
#check whether snake or ladder is there or not
def check_snakeLadder():
    snakeLadder = random.randint(2,80)
    divisor = random.randint(2,9)
    #if ladder is there, return +snakeLadder
    if(snakeLadder % divisor == 0):
        print(&quot;Wow Ladder : &quot;, snakeLadder)
        return(snakeLadder)
    #if snake is there, return -snakeLadder
    elif(snakeLadder % divisor &gt; 5):
        print(&quot;Sorry Snake : &quot;,snakeLadder)
        return(-snakeLadder)
    #neither snake or ladder is there
    else:
        print(&quot;Neither snake nor ladder : &quot;)
        return 0    
#play
def play():
  
    #input player names
    p1Name=input(&quot;Player1 Name : &quot;)
    p2Name=input(&quot;Players Name : &quot;)
    #initial points of players
    p1=0
    p2=0
    turn=0
    while(1):
        if(turn%2==0):
            print(p1Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p1 = p1+dice
            p1 += check_snakeLadder()
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p1&lt;0):
                p1=0
            
            if p1&gt;end:
                p1=end
            print(p1Name, &quot; Your Score : &quot;,p1)
            if(reached_end(p1)):
                print(p1Name, &quot; won&quot;)
                break
        else:
            print(p2Name, &quot; Your turn&quot;)
            c = input(&quot;Press 1 to continue, 0 to exit : &quot;)
            if(c==0):
                print(p1Name,&quot; Scored : &quot;,p1)
                print(p2Name,&quot; Scored : &quot;,p2)
                print(&quot;Quiting the game, bye&quot;)
                break
            #generate random number for dice
            dice = random.randint(1,6)
            print(&quot;Dice showed : &quot;,dice)
            
            p2 = p2+dice
            p2 += check_snakeLadder() 
            #after snake if, p1 becomes negative, make it 0,
            #as -ve is not available on board
            if(p2&lt;0):
                p2=0
            
            if p2&gt;end:
                p2=end
            print(p2Name, &quot; Your Score : &quot;,p2)
            if(reached_end(p2)):
                print(p2Name, &quot; won&quot;)
                break
        turn+=1
#calling the board and play methods
show_board()   
print('''
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   
''')
print('''
                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 
''')
print('''
 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   
                                                                              ''')
 
play()
&lt;/pre&gt;
---

====Sample Output====
---
&lt;pre&gt;
  o__ __o                              o                            
   /v     v\                            &lt;|&gt;                           
  /&gt;       &lt;\                           / \                           
 _\o____        \o__ __o      o__ __o/  \o/  o/  o__  __o       __o__ 
      \_\__o__   |     |&gt;    /v     |    |  /v  /v      |&gt;     /&gt;  \  
            \   / \   / \   /&gt;     / \  / \/&gt;  /&gt;      //      \o     
  \         /   \o/   \o/   \      \o/  \o/\o  \o    o/         v\    
   o       o     |     |     o      |    |  v\  v\  /v __o       &lt;\   
   &lt;\__ __/&gt;    / \   / \    &lt;\__  / \  / \  &lt;\  &lt;\/&gt; __/&gt;  _\o__&lt;/   


                               o  
                                &lt;|&gt; 
                                &lt; \ 
    o__ __o/  \o__ __o     o__ __o/ 
   /v     |    |     |&gt;   /v     |  
  /&gt;     / \  / \   / \  /&gt;     / \ 
  \      \o/  \o/   \o/  \      \o/ 
   o      |    |     |    o      |  
   &lt;\__  / \  / \   / \   &lt;\__  / \ 


 o                              o           o                                  
 &lt;|&gt;                            &lt;|&gt;         &lt;|&gt;                                 
 / \                            &lt; \         &lt; \                                 
 \o/           o__ __o/    o__ __o/    o__ __o/    o__  __o   \o__ __o    __o__ 
  |           /v     |    /v     |    /v     |    /v      |&gt;   |     |&gt;  /&gt;  \  
 / \         /&gt;     / \  /&gt;     / \  /&gt;     / \  /&gt;      //   / \   &lt; &gt;  \o     
 \o/         \      \o/  \      \o/  \      \o/  \o    o/     \o/         v\    
  |           o      |    o      |    o      |    v\  /v __o   |           &lt;\   
 / \ _\o__/_  &lt;\__  / \   &lt;\__  / \   &lt;\__  / \    &lt;\/&gt; __/&gt;  / \     _\o__&lt;/   

Player1 Name : ami

Players Name : ash
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Wow Ladder :  51
ami  Your Score :  55
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ash  Your Score :  4
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  4
Neither snake nor ladder : 
ami  Your Score :  59
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ash  Your Score :  6
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  2
Neither snake nor ladder : 
ami  Your Score :  61
ash  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  5
Neither snake nor ladder : 
ash  Your Score :  11
ami  Your turn

Press 1 to continue, 0 to exit : 1
Dice showed :  6
Wow Ladder :  36
ami  Your Score :  100
ami  won
&lt;/pre&gt;
---
----

== Snakes and Ladders By Sachin ==
----

Following code is designed to play old and classic game &quot;Sankes and Ladder&quot;

'''Rules:'''
&lt;pre&gt;
1. Both players start from Zero
2. Each player get a chance to roll a dice one by one.
3. Player have to move forward(steps) as number comes on the dice.
4. there are 2 obstacle in path Snakes and Ladders. 
    * Ladder: Once any player reached the ladder point He will climb up and gain extra 
steps.
    * Snake: Once any player reached the snake point. He will move downward and lose the steps. 
5. The player who reached the 100 block first will be winner.
&lt;/pre&gt;


'''Features:'''
&lt;pre&gt;
1. Player turn is randomly selected first time.
2. Player can use &quot;Show&quot; to see the board and their position.
3. The numbers on board are arranged in a zig zag manner as we see on original board.
4. Board block structure is almost near to real.
5. We can extend the player number with very few modification.
&lt;/pre&gt;


'''Working:'''
&lt;pre&gt;
* Initially player enter their names
* First turn is  randomly selected with the help of random.randint functionality.
* Snake and Ladder function will be called with every turn. These function just check whether player reach any predefined ladder or snake position. If so, they print the msg. 
  - Snake name will be randomly selected from list while printing the msg.
* If player reached the 100 block as per player and 9,9 index of matrix. Player will be declared winner and program will be terminated.
* If both player attain the same position. Player name will be concatenated. 
* Position function is used to update the player position after every dice roll.
* Fill function is used to previous position of player as it move to new position. 
&lt;/pre&gt;
Bug: Once both player attend same position. Players positions are not properly visible on board once they both one turn at-least.  


&lt;pre&gt;
print('''
  ____              _                          _   _              _     _           
 / ___| _ __   __ _| | _____    __ _ _ __   __| | | |    __ _  __| | __| | ___ _ __ 
 \___ \| '_ \ / _` | |/ / _ \  / _` | '_ \ / _` | | |   / _` |/ _` |/ _` |/ _ \ '__|
  ___) | | | | (_| |   &lt;  __/ | (_| | | | | (_| | | |__| (_| | (_| | (_| |  __/ |   
 |____/|_| |_|\__,_|_|\_\___|  \__,_|_| |_|\__,_| |_____\__,_|\__,_|\__,_|\___|_|      
                                                                                                                                                                                     
 ''')
import random
    
def dice():
    return random.randrange(1, 7)
def showboard():
    board.reverse()
    for i in range(10):
        for j in range(10):
            print(board[i][j], end = &quot;    &quot;)
        print(&quot;\n&quot;)
    board.reverse()
def position(pos, p, old):
   
    col = int(pos%10)
    row = int(pos/10)
    if row%2 == 0:   
        o_number = board[row][col]
        board[row][col] = p        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        o_number = temp[col]
        temp[col] = p
        temp.reverse()
        for i in range(10):
            board[row][i] = temp[i]
    try:
        old = int(old) - 1       
        if old &lt;= 0:
            exit
        else:
            fill(old)
    except ValueError:
        exit                                                       
    return o_number

def fill(pos):        
    col = int(pos)%10
    row = int(pos/10)
    if row%2 == 0:   
        board[row][col] = pos+1        
    else:
        temp = []
        for i in range(10):
            temp.append(board[row][i])
        temp.reverse()
        temp[col] = pos+1
        temp.reverse()
        for i in range(10):
            board[row][i]=temp[i]

def snake(pos, p, old):
    con = False
    a = [&quot;King Kobra&quot;, &quot;Anaconda&quot;, &quot;Rattlesnake&quot;, &quot;Death Adder&quot;, &quot;Black Mamba&quot; ]
    s_list= [32, 52, 78, 98]
    m_list= [2, 15, 23, 8]
    snake_l = random.choice(a)
    for i in range(len(s_list)):
        if s_list[i] == pos:
            pos = m_list[i]
            print(&quot;Oooppss!!! you just bitten by&quot;,snake_l,&quot;and slide from&quot;, s_list[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con      
            
def ladder(pos, p, old):
    con = False
    s_ladder = [7, 23, 41, 68]
    m_ladder = [29, 74, 93, 89]
    for i in range(len(s_ladder)):
        if s_ladder[i] == pos:
            pos = m_ladder[i]
            print(&quot;Waaooo!!! you just found a ladder and climbed from&quot;, s_ladder[i], &quot;to&quot;, pos)
            con = True
            position(pos-1, p, old)
    return pos-1, con   

p1 = input(&quot;Player one enter your name\n&quot;)
p2 = input(&quot;Player Two enter your name\n&quot;)


board = []
s = 0
for i in range (10):
    tboard=[]
    for j in range(10):
        s += 1
        tboard.append(s)
    if i%2 == 0:
        board.append(tboard)
    else:
        tboard.reverse()
        board.append(tboard)

T = random.randint(0, 1)
p1position = 0
p2position = 0
win = True
o_number1 = 0
o_number2 = 0
while win:    
    if T == 0:
        print(p1, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        a = input()
        a = a.lower()
        if a == &quot;r&quot;:
            p1number = dice()
            print(&quot;Dice shows:&quot;, p1number, &quot;\n&quot;)
            if p1position == 0:
                p1position = p1position + p1number -1
            else:
                p1position = p1position + p1number
            p1position, scon = snake(p1position+1, p1, o_number1)
            p1position, lcon = ladder(p1position+1, p1, o_number1)
            if scon == True or lcon == True:
                T = 1
                exit
            else:    
                if p1position == 99:
                    print(p1, &quot;has won the game \a&quot;)
                    win = False
                elif p1position == p2position and p1position &lt;= 99 and p2position &lt;= 99:
                    o_number1 = position(p1position, p1+p2, o_number1)
                    T =1
                elif p1position &gt; 99:
                    p1position = p1position - p1number
                    T =1
                else:
                    o_number1 = position(p1position, p1, o_number1)
                    T = 1
        elif a == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)      
    elif T == 1:
        print(p2, &quot;enter 'r' to roll the dice and 'show' to see the board&quot;)
        b = input()
        b = b.lower()
        if b == &quot;r&quot;:
            p2number = dice()
            print(&quot;Dice shows:&quot;, p2number, &quot;\n&quot;)
            if p2position == 0:
                p2position = p2position + p2number -1
            else:
                p2position = p2position + p2number
            p2position, scon = snake(p2position+1, p2, o_number2)
            p2position, lcon = ladder(p2position+1, p2, o_number2)
            if scon == True or lcon == True:
                T = 0
                exit
            else:
                if p2position == 99:
                    print(p2, &quot;has won the game&quot;)
                    win = False
                elif p1position == p2position and p1position &lt; 99 and p2position &lt; 99:
                    o_number2 = position(p2position, p1+p2, o_number2)
                    T = 0
                elif p2position &gt; 99:
                    p2position = p2position - p2number
                    T =0
                else:
                    o_number2 = position(p2position, p2, o_number2)
                    T = 0
        elif b == &quot;show&quot;:
            showboard()
        else:
            print(&quot;Enter valid input&quot;)
 &lt;/pre&gt;


'''Sample Output:'''

[[File:Snake&amp;Ladder M.jpg]]          [[FIle:Snakeladder won.jpg]]

== Spiral Traversal  ==
'''Introduction '''

Generally we print the matrix row wise or column wise.  Instead the matrix can be printed in a spiral. 
&lt;table&gt;  &lt;th&gt; Text Spiral&lt;/th&gt; &lt;th&gt; Graphical Spiral &lt;/th&gt;
&lt;tr&gt; &lt;td&gt; [[File:Spiral_matrix.JPG|200px]] &lt;/td&gt; &lt;td&gt; [[File:RectSpiral.jpg|200px]]&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

'''Code '''

We will see the code in two parts:
&lt;ol&gt;
&lt;li&gt; Textually &lt;/li&gt;
&lt;li&gt; Graphically &lt;/li&gt;

&lt;/ol&gt;

=== Spiral Traversal of Matrix Textually  ===

&lt;b&gt; Steps to print the matrix 'a' with rows 'm' and columns 'n'&lt;/b&gt;
&lt;pre&gt;
1. Initialise the index for row and column (k = 0 and l = 0)
2. Repeat step 3 through step 6 till the rows and columns are exhausted
3. Print k th row; Increment k to next row
4. Print the (n-1)th column; decrement n by one (Shrink the matrix by one column)
5. If rows of the matrix not exhausted, Print m th row (last row); Decrement m by one (Shrink the matrix by one row)
6. If columns of the matrix not exhausted, Print the first column in reverse manner; Increment the column index to 
   look for next column
&lt;/pre&gt;
&lt;b&gt; Program &lt;/b&gt;
&lt;pre&gt;
def spiral(m,n,a):                         # m - row, n - column and a- matrix to print
    k=0                                    # k = index of starting row
    l=0                                    # l = index of starting column 
    while(k&lt;m and l&lt;n):
        for i in range(l,n):              #print first row (k) from the remaining rows, varying the columns l to n
            print(a[k][i], end=&quot; &quot;)
        k+=1                              # kth row printed. point k to next row
        for i in range(k,m):              #print last column (n-1) from the remaining columns, varying the row k to m
            print(a[i][n-1],end=&quot; &quot;)
        n-=1                               # nth column printed. reduce the matrix column n by one
        if(k&lt;m):                           # is row exhausted?
             for i in range(n-1,l-1, -1):  #printing the last row from remaining rows
                print(a[m-1][i],end=&quot; &quot;)
        m-=1                              # reduce the matrix row m by one
        if(l&lt;n):                          # is column exhausted?
            for i in range(m-1,k-1,-1):    #printing the first column from the remaining columns   
                print(a[i][l],end=&quot; &quot;)
        l+=1
a=[]
r,c = input().split()
count=1
r = int(r)
c = int(c)
for i in range(r):
    l=[]
    for j in range(c):
        l.append(count)
        count+=1
    a.append(l)

spiral(r,c,a)
4 4
#Output: 1 2 3 4 8 12 16 15 14 13 9 6 7 11

spiral (r,c,a)
4 5
#Output:1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

&lt;/pre&gt;

=== Spiral Traversal of Matrix Graphically  ===
---
First of all, let us learn how to draw something graphically in Python language. For that, we need to have &lt;i&gt;turtle&lt;/i&gt; module on our machine. Sample program to draw a single line is as follows:
==== Graphics Using turtle  ====
&quot;Turtle” is a python feature like a drawing board, which lets you command a turtle to draw all over it!. To make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:
 1. Import the turtle module  (import turtle) 
 2. Create a turtle to control. (tur=turtle.Turtle() )
 3. Draw around using the turtle methods
 4. Run turtle.done()

'''Commonly used turtle methods are :'''
&lt;table&gt; 
&lt;tr align = &quot;center&quot;&gt; &lt;th&gt;Method	&lt;/th&gt; &lt;th&gt; Parameter	&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;tr&gt;
&lt;tr&gt; &lt;td&gt;Turtle()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Creates and returns a new tutrle object&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;forward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle forward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;backward()	&lt;/td&gt; &lt;td&gt;amount	&lt;/td&gt; &lt;td&gt;Moves the turtle backward by the specified amount&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;right()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;left()	&lt;/td&gt; &lt;td&gt;angle	&lt;/td&gt; &lt;td&gt;Turns the turtle counter clockwise&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;penup()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;pendown()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;up()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Picks up the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;down()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Puts down the turtle’s Pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;color()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle’s pen&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;fillcolor()	&lt;/td&gt; &lt;td&gt;Color name	&lt;/td&gt; &lt;td&gt;Changes the color of the turtle will use to fill a polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;heading()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current heading&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;position()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Returns the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;goto()	&lt;/td&gt; &lt;td&gt;x, y	&lt;/td&gt; &lt;td&gt;Move the turtle to position x,y&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;begin_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Remember the starting point for a filled polygon&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;end_fill()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Close the polygon and fill with the current fill color&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;dot()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leave the dot at the current position&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;stamp()	&lt;/td&gt; &lt;td&gt;None	&lt;/td&gt; &lt;td&gt;Leaves an impression of a turtle shape at the current location&lt;/td&gt; &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt;shape()	&lt;/td&gt; &lt;td&gt;shapename	&lt;/td&gt; &lt;td&gt;Should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;b&gt; import turtle and tur=turtle.Turtle() &lt;/b&gt;, 
give the command &lt;b&gt; tur.forward(25) &lt;/b&gt;, and it moves (on-screen!) 25 pixels in the direction it is facing, drawing a line as it moves. Give the command &lt;b&gt;tur.right(25) &lt;/b&gt;, and it rotates in-place 25 degrees clockwise.

'''Drawing Line and Star '''
&lt;pre&gt;
import turtle
tur = turtle.Turtle()

for i in range(5):
    tur.forward(50)
for i in range(5):
    tur.forward(50)
    tur.right(144)
    
turtle.done()
&lt;/pre&gt;
&lt;b&gt; Output : &lt;/b&gt; [[File:turtle1.JPG|200]]
==== Example1 ====
&lt;pre&gt;
import turtle
turtle.bgcolor(&quot;black&quot;)
seurat = turtle.Turtle()
width=5
height=7

dotDistance=25
seurat.setpos(-250,250)

#def spiral(m,n,a):
def spiral(m,n):
    k=0
    l=0
    f=0
    seurat.color(&quot;white&quot;)
    while(k&lt;m and l&lt;n):                           #  k=index of starting row    l=index of starting column 
        if(f==1):
            seurat.right(90)
        #printing the first row from the remaining rows
        for i in range(l,n):
            seurat.forward(dotDistance)
            #print(a[k][i], end=&quot; &quot;)
        k+=1
        f=1
        seurat.right(90)
        
        #printing the last column from the remaining column
        for i in range(k,m):
            #print(a[i][n-1],end=&quot; &quot;)
            seurat.forward(dotDistance)
        n-=1
        seurat.right(90)
        if(k&lt;m):
            #printing the last row from remaining rows
            for i in range(n-1,l-1, -1):
                seurat.forward(dotDistance)
            
                #print(a[m-1][i],end=&quot; &quot;)
            m-=1
        seurat.right(90)
        if(l&lt;n):
            #printing the first column from the remaining columns
            for i in range(m-1,k-1,-1):
                #print(a[i][l],end=&quot; &quot;)
                seurat.forward(dotDistance)
                
            l+=1

spiral(20,20)
turtle.done()
&lt;/pre&gt;

&lt;hr&gt;
====Example 2 ====
&lt;pre&gt;
import turtle
def j ():
    sac.pencolor(0.2,0.3,0.5)           # Here we chnaged pen color with R,G,B vlues. You can use hexadecimal too
    sac.penup()                         # Here pen will stop writing as dont want any extralines while moving to new position
    sac.setpos(-200,250)                # Turtle will move to -200, 250 coordinates
    sac.pendown()                       # Here we put pen down as we are ready to draw
    sac.forward(100)                    # It will draw line upto 100points along X axis
    sac.penup                           # We stop writing to aviod overwriting as we are moving backward in next step
    sac.backward(50)                    # It will move turtle backward uto 50 points along X axis
    sac.right(90)                       # As we move backward but turtle still facing +ve x axis so we move his face toward -ve Y axis by roating 90 deegree
    sac.pendown()                       # We put the pen down again as we are ready to write
    sac.forward(75)
    sac.circle(-16.65, 90)              # It will draw a circle if Radius -16.65 with arc of 90 deegree. If you give only radius it will create full circle
    sac.forward(16.6)
    sac.circle(-16.6, 90)
    sac.forward(10)
    sac.rt(90)                          # Here we reset the turtle facing direction back to =ve X axis
    return

def o():
    sac.pencolor(0.7,0.3,0.8)
    sac.penup()
    sac.setpos(-50,250)
    sac.pendown()
    for i in range(2):
        sac.fd(25)
      #  sac.rt(90)
        sac.circle(-25, 90)
        sac.fd(50)
        sac.circle(-25, 90)
    return
def c():
    sac.pencolor(0.7,0.5,0.3)
    sac.penup()
    sac.setpos(100,250)
    sac.pendown()
    sac.rt(180)
    for i in range(2):
        sac.fd(50)
        sac.circle(25, 90)
    sac.fd(50)
    return

sac = turtle.Turtle()
sac.pensize(15)                         # It will set pen tip width to 15 
sac.shape(&quot;turtle&quot;)                     # It will set pen shape to turtle
sac.speed(1)                            # It will set pen moving speed to 1 default is 6
turtle.write(&quot;JOC WIKI \n Project&quot;, move=True, align=&quot;center&quot;, font=(&quot;Arial&quot;, 20, &quot;bold&quot;))
j()
o()
c()
turtle.done()
&lt;/pre&gt;

&lt;big&gt;'''Output:'''&lt;/big&gt; 
[[File:JOC.jpg]]

== Package Management System - Conda &amp; PIP ==

Modules are Python code libraries that can be included in the project for additional functionalities.  All the files you need for a module is contained in a Package. If you have Python installed via Anaconda package manager, you can install the required modules using the command conda install. For example, to install pandas, you would execute the command - '''conda install pandas'''.

If you already have a regular, non-Anaconda Python installed on the computer, you can install the required modules using pip. Open your command line program and execute command '''pip install &lt;module name&gt;''' to install a module.  For example, to install pandas, you would execute command - pip install pandas.

===Conda===
Conda is an open source package management system and environment management system. It was created for Python programs, but it can package and distribute software for any language.  It runs on platforms like Windows, macOS and Linux. Conda  can be installed quickly, can run and update packages and their dependencies with much ease. Conda easily creates, saves, loads and switches between environments on your local computer. 

The conda command is the primary interface for managing installations of various packages. The commands can be issued at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux. You should have already installed Anaconda.

The commands can

   Query and search the Anaconda package index and current Anaconda installation.
   Create new conda environments.
   Install and update packages into existing conda environments.


'''conda commands '''

The following commands can be run in your Terminal window or an Anaconda Prompt

&lt;table&gt; 
&lt;tr&gt; &lt;td&gt; conda info --envs   &lt;/td&gt; &lt;td&gt; To see a list of all of your environments &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda list   &lt;/td&gt; &lt;td&gt; To see a list of all packages installed in a specific environment &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv python=3.4  &lt;/td&gt; &lt;td&gt; To create an environment with a specific version of Python &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; conda create -n myenv scipy  &lt;/td&gt; &lt;td&gt; To create an environment with a specific package &lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;


===PIP===
PIP is a package manager for Python packages, or modules.If you have Python version 3.4 or later, PIP is included by default. 
If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/

'''Download a Package '''

Downloading a package is very easy. Open the command line interface and use PIP to download the package you want. Navigate 
the command line to the location of Python's script directory, and type the following:

&lt;b&gt; pip install gmplot &lt;/b&gt;

Now you have downloaded and installed your first package!

You may get an error message like&lt;i&gt; Requirement already satisfied ....&lt;/i&gt;if you have multiple versions of Python in your system. 
Then you may give the command specific to the Python version like this

&lt;b&gt; py -3 -m pip install gmplot &lt;/b&gt;

Bingo!!! you have installed the package

== GPS Tracker  ==
=== Introduction ===
 Global Positioning System (GPS) is a network of satellite that help to identify the geographical location of a place or a person. 
 '''For Example:''' We want to track the route followed by a person. GPS tracker will be very useful in such case. The output of GPS tracker is in the form of latitude and longitude. 
 They are the real numbers(geographical coordinates), that we cannot understand easily. To make it understandable, a Python program is implemented to show geographic locations on the Map. 


''' Explanation for Code '''

To implement GPS tracker in Python language, we need 
&lt;ul&gt;
&lt;li&gt;csv file, wherein latitude and longitude are available&lt;/li&gt;
&lt;li&gt;gmplot python module should be installed&lt;/li&gt;
     Check whether gmplot is installed or not on your system. For that on your python shell, write, 
     &lt;pre&gt;
     from gmplot import gmplot  &lt;/pre&gt;
     If it, gives any error, it means, gmplot module is not installed on your machine. One can install gmplot using
      &lt;pre&gt;
     pip3 install gmplot on Ubuntu or linux compatible machines.  &lt;/pre&gt;
&lt;li&gt;A HTML file is generated, that shows the Google map output of all data of &lt;i&gt;route.csv&lt;/i&gt; file
&lt;li&gt;A browser to open the output HTML file&lt;/li&gt;
&lt;/ul&gt;

=== Reading data of GPS locations  ===
GPS Locations - Latitude and longitude are to be stored in .csv file.

'''Contents of route.csv '''(Data as shared by Amit sir, is in the following format.)
&lt;pre&gt;
28.689519,77.324495
28.689431,77.324347
28.689316,77.324165
28.689285,77.324062
28.689218,77.323948
28.689343,77.323858
28.689431,77.323807
&lt;/pre&gt;


''' Read csv file '''

Import the csv module and use the reader to get values of longtitude and latitude from file.
&lt;pre&gt;
import csv
reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
&lt;/pre&gt;

=== Code ===
&lt;pre&gt;
import csv
from gmplot import gmplot
gmap = gmplot.GoogleMapPlotter(28.689169, 77.324448,17)      # GoogleMapPlotter returns Map object 
gmap.coloricon = &quot;http://www.googlemapsmarkers.com/v1/%s/&quot;   # set icon as Google marker icon
        
with open(&quot;route.csv&quot;,&quot;r&quot;) as f:
    reader = csv.reader(f)
    k=0
    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        if(k==0):
            gmap.marker(lat,long,'yellow')                  # set the marker with yellow color for the starting location
            k=1
        else:
            gmap.marker(lat,long,'blue')                    # icon with blue color for the all other locations
        gmap.marker(lat,long,'red')                         # icon with red color for the last location
gmap.draw(&quot;mymap.html&quot;)                                     # Generate HTML that has the google map of all data of 'route.csv'
#open the mymap.html file        
&lt;/pre&gt;

''' Output of mymap.html '''

Showing screen shot of html file.
[[File: mymap1.JPG]]</text>
      <sha1>bv1lak16cxsnwzr4uln1zfl4jnorg58</sha1>
    </revision>
  </page>
</mediawiki>
