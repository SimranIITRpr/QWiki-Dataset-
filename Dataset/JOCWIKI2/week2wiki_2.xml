<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>JOCWiki</sitename>
    <dbname>Jocwiki_second</dbname>
    <base>http://sccilabs.org/jocwiki2/index.php/Main_Page</base>
    <generator>MediaWiki 1.30.0</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">JOCWiki</namespace>
      <namespace key="5" case="first-letter">JOCWiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
      <namespace key="2600" case="first-letter">Topic</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Lecture Notes:Week 2</title>
    <ns>0</ns>
    <id>181</id>
    <revision>
      <id>470</id>
      <timestamp>2019-02-03T16:35:42Z</timestamp>
      <contributor>
        <username>Simran</username>
        <id>4</id>
      </contributor>
      <comment>Created page with &quot;==Introduction to Python==  &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4442">==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.</text>
      <sha1>b69p9u3fxtnkoaf9h5sd4rfkuri1kzb</sha1>
    </revision>
    <revision>
      <id>510</id>
      <parentid>470</parentid>
      <timestamp>2019-02-06T15:46:33Z</timestamp>
      <contributor>
        <username>Hardik20sharma</username>
        <id>1109</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5182">==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a semicolon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.</text>
      <sha1>k65m1xyiyncrkfhsmw5g7ylj9qb7as5</sha1>
    </revision>
    <revision>
      <id>511</id>
      <parentid>510</parentid>
      <timestamp>2019-02-06T15:53:21Z</timestamp>
      <contributor>
        <username>Hardik20sharma</username>
        <id>1109</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5415">==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a semicolon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.

== Difference between '=' and '==' in Python ==
The '=' operator is an Arithmetic Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.</text>
      <sha1>dqfs9mmi9gm3k4avk8su4cgrbs6dm8c</sha1>
    </revision>
    <revision>
      <id>526</id>
      <parentid>511</parentid>
      <timestamp>2019-02-06T20:34:04Z</timestamp>
      <contributor>
        <username>Simran</username>
        <id>4</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5478">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists| Lists]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a semicolon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.

== Difference between '=' and '==' in Python ==
The '=' operator is an Arithmetic Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.</text>
      <sha1>k6h90tj10mmvz3ubqj6pn571fpk08u4</sha1>
    </revision>
    <revision>
      <id>527</id>
      <parentid>526</parentid>
      <timestamp>2019-02-06T20:34:20Z</timestamp>
      <contributor>
        <username>Simran</username>
        <id>4</id>
      </contributor>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5480">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists | Lists]

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a semicolon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.

== Difference between '=' and '==' in Python ==
The '=' operator is an Arithmetic Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.</text>
      <sha1>8022w4dtkqt62vtdy3gim42rbcmsat4</sha1>
    </revision>
    <revision>
      <id>528</id>
      <parentid>527</parentid>
      <timestamp>2019-02-06T20:34:36Z</timestamp>
      <contributor>
        <username>Simran</username>
        <id>4</id>
      </contributor>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5479">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a semicolon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.

== Difference between '=' and '==' in Python ==
The '=' operator is an Arithmetic Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.</text>
      <sha1>eyzj7vd6qen3jq6msc8g91bb4goi7zj</sha1>
    </revision>
    <revision>
      <id>529</id>
      <parentid>528</parentid>
      <timestamp>2019-02-07T12:58:42Z</timestamp>
      <contributor>
        <username>Rrekhareddy</username>
        <id>59</id>
      </contributor>
      <comment>/* Difference between '=' and '==' in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5479">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a semicolon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.</text>
      <sha1>m844e7k4p0oepwgr8e0i6z9rdp84ho0</sha1>
    </revision>
    <revision>
      <id>537</id>
      <parentid>529</parentid>
      <timestamp>2019-02-07T16:02:15Z</timestamp>
      <contributor>
        <username>Tom Thomas</username>
        <id>1686</id>
      </contributor>
      <comment>/* For Loop and its importance */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5475">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.</text>
      <sha1>m9be2ltpmy4uuf9o6xtx3d6njdyryi0</sha1>
    </revision>
    <revision>
      <id>545</id>
      <parentid>537</parentid>
      <timestamp>2019-02-07T19:03:44Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5996">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).</text>
      <sha1>r9a6ftbusjglh7y00uow6lm48ngcobd</sha1>
    </revision>
    <revision>
      <id>546</id>
      <parentid>545</parentid>
      <timestamp>2019-02-07T19:13:04Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6533">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.</text>
      <sha1>dyy2yzeqn6o6ekce9v5be1qrygxxscu</sha1>
    </revision>
    <revision>
      <id>547</id>
      <parentid>546</parentid>
      <timestamp>2019-02-07T19:21:48Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6791">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.</text>
      <sha1>8yona0c8vdjz76bkbs9go87xumfxylu</sha1>
    </revision>
    <revision>
      <id>549</id>
      <parentid>547</parentid>
      <timestamp>2019-02-07T19:28:57Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* For Loop and its importance */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6997">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.</text>
      <sha1>4lbfacy5hy8873pytojbcjblh6j4ox4</sha1>
    </revision>
    <revision>
      <id>557</id>
      <parentid>549</parentid>
      <timestamp>2019-02-08T05:28:25Z</timestamp>
      <contributor>
        <username>Allam123</username>
        <id>762</id>
      </contributor>
      <minor/>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7091">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.</text>
      <sha1>shxry3y9094vqpr3949i6lfiz6x7iw9</sha1>
    </revision>
    <revision>
      <id>567</id>
      <parentid>557</parentid>
      <timestamp>2019-02-09T04:08:42Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7850">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''</text>
      <sha1>hvmaxhhj1w1a357cxh3bug6hlcwbx4g</sha1>
    </revision>
    <revision>
      <id>589</id>
      <parentid>567</parentid>
      <timestamp>2019-02-09T15:43:58Z</timestamp>
      <contributor>
        <username>Gourav</username>
        <id>437</id>
      </contributor>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9691">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;) 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;)
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''</text>
      <sha1>0f40nbmiievv09991qju7w9vcgqr87u</sha1>
    </revision>
    <revision>
      <id>604</id>
      <parentid>589</parentid>
      <timestamp>2019-02-10T11:13:22Z</timestamp>
      <contributor>
        <username>Quantumd3</username>
        <id>1904</id>
      </contributor>
      <minor/>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9707">==Lists==
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''</text>
      <sha1>q5ro61fo3i217dmi3lt86esg9ci6isn</sha1>
    </revision>
    <revision>
      <id>632</id>
      <parentid>604</parentid>
      <timestamp>2019-02-11T12:36:24Z</timestamp>
      <contributor>
        <username>Ravi4224</username>
        <id>461</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9811">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''</text>
      <sha1>3w64sqdm1qzmos3jl6fd73hstn6nbe3</sha1>
    </revision>
    <revision>
      <id>686</id>
      <parentid>632</parentid>
      <timestamp>2019-02-13T11:08:08Z</timestamp>
      <contributor>
        <username>Ravi4224</username>
        <id>461</id>
      </contributor>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9878">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''</text>
      <sha1>rbvx45f4w02ygt66oqft5tkx1dws6hz</sha1>
    </revision>
    <revision>
      <id>706</id>
      <parentid>686</parentid>
      <timestamp>2019-02-13T21:08:17Z</timestamp>
      <contributor>
        <username>Ravi4224</username>
        <id>461</id>
      </contributor>
      <minor/>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9907">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''</text>
      <sha1>g9l2dc65i8j5i5o2qeymi3lb1qwsfng</sha1>
    </revision>
    <revision>
      <id>788</id>
      <parentid>706</parentid>
      <timestamp>2019-02-17T10:28:13Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Range */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10124">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>m7qelcx5yroc7a0z07czm0diqpdwn4m</sha1>
    </revision>
    <revision>
      <id>1006</id>
      <parentid>788</parentid>
      <timestamp>2019-02-22T20:14:14Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10393">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0. This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>6takg23sst0615uww1daejbbbditvju</sha1>
    </revision>
    <revision>
      <id>1098</id>
      <parentid>1006</parentid>
      <timestamp>2019-02-26T05:59:29Z</timestamp>
      <contributor>
        <username>HardcodeCoder</username>
        <id>3264</id>
      </contributor>
      <comment>/* For Loop and its importance */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10650">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10
Note: The end value of the range is excluded

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>9o0hfrh6ye4hhn73tbvm3qd2mpg803h</sha1>
    </revision>
    <revision>
      <id>1099</id>
      <parentid>1098</parentid>
      <timestamp>2019-02-26T06:03:53Z</timestamp>
      <contributor>
        <username>HardcodeCoder</username>
        <id>3264</id>
      </contributor>
      <comment>/* For Loop and its importance */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10651">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10
#Note: The end value of the range is excluded

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>8aiof54gnlfgnik9m3g2sq70nwim6dc</sha1>
    </revision>
    <revision>
      <id>1100</id>
      <parentid>1099</parentid>
      <timestamp>2019-02-26T06:10:26Z</timestamp>
      <contributor>
        <username>HardcodeCoder</username>
        <id>3264</id>
      </contributor>
      <comment>/* For Loop and its importance */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10739">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>plg6rx96or8cwcb6szve5krocv1d6gf</sha1>
    </revision>
    <revision>
      <id>1112</id>
      <parentid>1100</parentid>
      <timestamp>2019-02-26T09:03:12Z</timestamp>
      <contributor>
        <username>Venkata Swathi R</username>
        <id>1827</id>
      </contributor>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11020">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>53x92ivo7iw7v5gpxccje5vpvxgbupz</sha1>
    </revision>
    <revision>
      <id>1113</id>
      <parentid>1112</parentid>
      <timestamp>2019-02-26T09:08:07Z</timestamp>
      <contributor>
        <username>Venkata Swathi R</username>
        <id>1827</id>
      </contributor>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11357">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. It allows us to delete the last element from the list, just the way it does with a stack structure. It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  li.pop()   # returns 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>5h7m659fle229e4qzz9wbaskj07df4b</sha1>
    </revision>
    <revision>
      <id>1114</id>
      <parentid>1113</parentid>
      <timestamp>2019-02-26T09:09:20Z</timestamp>
      <contributor>
        <username>Venkata Swathi R</username>
        <id>1827</id>
      </contributor>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11363">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  li.pop()   # returns 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>1oeiz9ii5j5kwzkgr9fsun1ejtcic6z</sha1>
    </revision>
    <revision>
      <id>1212</id>
      <parentid>1114</parentid>
      <timestamp>2019-02-28T10:52:35Z</timestamp>
      <contributor>
        <username>Subhamohan</username>
        <id>1872</id>
      </contributor>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11387">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).



== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>1twdsbtivkz9o4b43jd2856g8o2dk40</sha1>
    </revision>
    <revision>
      <id>1485</id>
      <parentid>1212</parentid>
      <timestamp>2019-03-05T06:42:13Z</timestamp>
      <contributor>
        <username>RahulPandey</username>
        <id>1707</id>
      </contributor>
      <comment>/* Input */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11416">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''input(&quot;Enter text here&quot;)'''

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>hinrze0bdszdqm72q9oa0vshpqsfsnx</sha1>
    </revision>
    <revision>
      <id>1486</id>
      <parentid>1485</parentid>
      <timestamp>2019-03-05T06:43:25Z</timestamp>
      <contributor>
        <username>RahulPandey</username>
        <id>1707</id>
      </contributor>
      <comment>/* Input */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11424">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''Syntax: '''input(&quot;Enter text here&quot;)

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>prufw8sxn2ae1xcccldkkl2n2lemlji</sha1>
    </revision>
    <revision>
      <id>1487</id>
      <parentid>1486</parentid>
      <timestamp>2019-03-05T06:50:21Z</timestamp>
      <contributor>
        <username>RahulPandey</username>
        <id>1707</id>
      </contributor>
      <comment>/* elif Statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11488">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''Syntax: '''input(&quot;Enter text here&quot;)

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.
&lt;p&gt; '''Example''': if(a&gt;b): elif(b&gt;a): elif(c&gt;b): else(a&gt;c)&lt;/p&gt;

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>47e1qmb2h6ijt7rb81khmuw06mokbth</sha1>
    </revision>
    <revision>
      <id>1488</id>
      <parentid>1487</parentid>
      <timestamp>2019-03-05T06:53:34Z</timestamp>
      <contributor>
        <username>RahulPandey</username>
        <id>1707</id>
      </contributor>
      <comment>/* elif Statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11748">==Lists==
***** For separating input use ---- a=input().split()
and for accessing them individually use a[0],a[1]
******** To print it in same line with space use this code---- write......... print(num,end=&quot;&quot;)
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]
To read more than one value into a list in a single line
list1=list(map(int,input().split()))

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''Syntax: '''input(&quot;Enter text here&quot;)

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.
&lt;p&gt; '''Example :'''&gt;&gt;&gt; if(a&gt;b):
                               (statement) 
                          elif(b&gt;a):
                                (statement) 
                          elif(c&gt;b):
                                (statement)   
                       else(a&gt;c)
                                (statement)
&lt;/p&gt;

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>d9xvlky714uqf1p3705n8yvasfa307z</sha1>
    </revision>
    <revision>
      <id>2567</id>
      <parentid>1488</parentid>
      <timestamp>2019-04-04T14:40:12Z</timestamp>
      <contributor>
        <username>Manav2107</username>
        <id>3151</id>
      </contributor>
      <minor/>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11756">==Lists==

***** For separating inputs use the command: ''a = input().split()''
and to access them individually use: a[0], a[1] ....

To print in the same line with space, use the code: ''print(num, end=&quot;&quot;)''
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

To read more than one value of list in a single line, use:
''list1 = list(map(int,input().split()))''

The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''Syntax: '''input(&quot;Enter text here&quot;)

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.
&lt;p&gt; '''Example :'''&gt;&gt;&gt; if(a&gt;b):
                               (statement) 
                          elif(b&gt;a):
                                (statement) 
                          elif(c&gt;b):
                                (statement)   
                       else(a&gt;c)
                                (statement)
&lt;/p&gt;

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>0et8dcm1ghh7ktce1ov3o1szbsm4mn3</sha1>
    </revision>
    <revision>
      <id>2568</id>
      <parentid>2567</parentid>
      <timestamp>2019-04-04T14:41:47Z</timestamp>
      <contributor>
        <username>Manav2107</username>
        <id>3151</id>
      </contributor>
      <comment>/* Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11752">==Lists==


The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

For separating inputs use the command: ''a = input().split()''
and to access them individually use: a[0], a[1] ....

To print in the same line with space, use the code: ''print(num, end=&quot;&quot;)''
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

To read more than one value of list in a single line, use:
''list1 = list(map(int,input().split()))''


[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; ca be used to iterate through the values &amp; indices of a list simultaneously.


==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''Syntax: '''input(&quot;Enter text here&quot;)

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.
&lt;p&gt; '''Example :'''&gt;&gt;&gt; if(a&gt;b):
                               (statement) 
                          elif(b&gt;a):
                                (statement) 
                          elif(c&gt;b):
                                (statement)   
                       else(a&gt;c)
                                (statement)
&lt;/p&gt;

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>i4xamwzmen4w1am3ay65ijsd4e866ga</sha1>
    </revision>
    <revision>
      <id>2925</id>
      <parentid>2568</parentid>
      <timestamp>2019-04-19T07:31:08Z</timestamp>
      <contributor>
        <username>Catchsaurabh0209</username>
        <id>2839</id>
      </contributor>
      <comment>/* List Functions */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11752">==Lists==


The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

For separating inputs use the command: ''a = input().split()''
and to access them individually use: a[0], a[1] ....

To print in the same line with space, use the code: ''print(num, end=&quot;&quot;)''
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

To read more than one value of list in a single line, use:
''list1 = list(map(int,input().split()))''


[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; can be used to iterate through the values &amp; indices of a list simultaneously.

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

== Difference between '=' and '==' in Python ==
The '=' operator is an Assignment Operator. 
So, a = 3 will assign 3 to variable a.

The '==' operator is a Logical Operator.
So, a == 3 will check if value of variable a is 3 or not.


== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''Syntax: '''input(&quot;Enter text here&quot;)

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.
&lt;p&gt; '''Example :'''&gt;&gt;&gt; if(a&gt;b):
                               (statement) 
                          elif(b&gt;a):
                                (statement) 
                          elif(c&gt;b):
                                (statement)   
                       else(a&gt;c)
                                (statement)
&lt;/p&gt;

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>mppu1cw86g5nu89wlm7x7p52srviu6q</sha1>
    </revision>
    <revision>
      <id>3014</id>
      <parentid>2925</parentid>
      <timestamp>2019-04-26T07:51:24Z</timestamp>
      <contributor>
        <username>ANUSHIYA</username>
        <id>3983</id>
      </contributor>
      <comment>/* Difference between '=' and '==' in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11733">==Lists==


The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

For separating inputs use the command: ''a = input().split()''
and to access them individually use: a[0], a[1] ....

To print in the same line with space, use the code: ''print(num, end=&quot;&quot;)''
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

To read more than one value of list in a single line, use:
''list1 = list(map(int,input().split()))''


[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

== List Functions ==
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).

The function &quot;enumerate&quot; can be used to iterate through the values &amp; indices of a list simultaneously.

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

Difference between'='and'=='in Python 
The'='operator is an Assignment Operator. 
So,a=3 will assign 3 to variable a.

The'=='operator is a Logical Operator.
So, a==3 will check if value of variable a is 3 or not.

== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''Syntax: '''input(&quot;Enter text here&quot;)

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.
&lt;p&gt; '''Example :'''&gt;&gt;&gt; if(a&gt;b):
                               (statement) 
                          elif(b&gt;a):
                                (statement) 
                          elif(c&gt;b):
                                (statement)   
                       else(a&gt;c)
                                (statement)
&lt;/p&gt;

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>g61bh2ustglb6pz3zdqqf79pra86rx6</sha1>
    </revision>
    <revision>
      <id>3015</id>
      <parentid>3014</parentid>
      <timestamp>2019-04-26T07:53:52Z</timestamp>
      <contributor>
        <username>ANUSHIYA</username>
        <id>3983</id>
      </contributor>
      <comment>/* List Functions */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11726">==Lists==


The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

For separating inputs use the command: ''a = input().split()''
and to access them individually use: a[0], a[1] ....

To print in the same line with space, use the code: ''print(num, end=&quot;&quot;)''
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

To read more than one value of list in a single line, use:
''list1 = list(map(int,input().split()))''


[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

List Functions
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).
The function &quot;enumerate&quot; can be used to iterate through the values &amp; indices of a list simultaneously.

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

Difference between'='and'=='in Python 
The'='operator is an Assignment Operator. 
So,a=3 will assign 3 to variable a.

The'=='operator is a Logical Operator.
So, a==3 will check if value of variable a is 3 or not.

== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''Syntax: '''input(&quot;Enter text here&quot;)

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.
&lt;p&gt; '''Example :'''&gt;&gt;&gt; if(a&gt;b):
                               (statement) 
                          elif(b&gt;a):
                                (statement) 
                          elif(c&gt;b):
                                (statement)   
                       else(a&gt;c)
                                (statement)
&lt;/p&gt;

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>ls1b1pf9erzyal5qygcxl6g513s42vm</sha1>
    </revision>
    <revision>
      <id>3020</id>
      <parentid>3015</parentid>
      <timestamp>2019-04-26T12:19:13Z</timestamp>
      <contributor>
        <username>Shrenika Gada</username>
        <id>3934</id>
      </contributor>
      <minor/>
      <comment>/* elif Statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11722">==Lists==


The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

For separating inputs use the command: ''a = input().split()''
and to access them individually use: a[0], a[1] ....

To print in the same line with space, use the code: ''print(num, end=&quot;&quot;)''
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

To read more than one value of list in a single line, use:
''list1 = list(map(int,input().split()))''


[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

List Functions
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).
The function &quot;enumerate&quot; can be used to iterate through the values &amp; indices of a list simultaneously.

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

Difference between'='and'=='in Python 
The'='operator is an Assignment Operator. 
So,a=3 will assign 3 to variable a.

The'=='operator is a Logical Operator.
So, a==3 will check if value of variable a is 3 or not.

== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''Syntax: '''input(&quot;Enter text here&quot;)

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.
&lt;p&gt; '''Example :'''&gt;&gt;&gt; if(a&gt;b):
                               (statement) 
                          elif(b&gt;a):
                                (statement) 
                          elif(c&gt;b):
                                (statement)   
                       else:
                                (statement)
&lt;/p&gt;

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument.
If it is called with two arguments, it produces values from the first value to the second.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>fhjji7uiu385j6xxehqkl706z4x13is</sha1>
    </revision>
    <revision>
      <id>3028</id>
      <parentid>3020</parentid>
      <timestamp>2019-04-27T11:05:09Z</timestamp>
      <contributor>
        <username>Ghostxzxz</username>
        <id>3623</id>
      </contributor>
      <comment>/* Range */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11744">==Lists==


The lists are containers that hold some other objects in a given order. It usually puts into practice the sequence protocol and allows programmers to add or remove objects from that sequence. Each element of the sequence is assigned a number, i.e., the index and the first index is 0 (zero). This versatile data-type of Python is written in a sequence of list separated by commas between expressions.

For separating inputs use the command: ''a = input().split()''
and to access them individually use: a[0], a[1] ....

To print in the same line with space, use the code: ''print(num, end=&quot;&quot;)''
[http://sccilabs.org/jocwiki/index.php/Lists  Lists]

To read more than one value of list in a single line, use:
''list1 = list(map(int,input().split()))''


[['''CREATING LISTS''':]]

To build a list, just put some expressions in square brackets. ''The syntax is:
''
''lst1 = [ ]  # lst1 is the name of the list
lst2 = [expression1 , …. , expression_N]
''
'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];''

[['''ACCESSING LIST VALUES:'''
]]
List apply the standard interface sequence in which len(L) returns the number of items present in the list and L[i] represents the item at index i. Also L[i:j] returns new list containing objects within 'i' and 'j'.

[['''PROGRAM TO EXPLAIN HOW TO ACCESS LISTS:''']]

'''e.g.,'''
''lst1 = ['computersc', 'IT', 'CSE'];
lst2 = [1993, 2016];
lst3 = [2, 4, 6, &quot;g&quot;, &quot;k&quot;, &quot;s&quot;];
''
'''OUTPUT:'''
''print (&quot;lst1[0]&quot;, lst1[0])
print (&quot;lst3[2:4]&quot;, lst3[2:4])
lst1[0] computersc
lst3[2:4] [6, 'g']

''[['''UPDATING LISTS:'''
]]
'''e.g.,'''
Program to show how to add/update single or multiple elements in a list:

lst1 = ['computersc', 'IT', 'CSE'];

print (&quot;Second value of the list is:&quot;); 
print (lst1[1])

lst1[1] = 'Robotics'
print (&quot;Updated value in the second index of list is:&quot;);[[Link title]]
print (lst1[1])

'''OUTPUT:'''
Second value of the list is:
IT
Updated value in the second index of list is:
Robotics

[['''DELETING ELEMENTS FROM LISTS:''']]

To remove an element from the list, we can use the del-statement. The syntax for deleting an element from a list is:

'''SYNTAX:'''
''del list_name[index_val];''


Deletion of elements could also be done by using remove(). Syntax:

        list_name.remove(element)

example, let's take a list,

      li = [34,67,12,90]

to remove a specific element, let's say 12, all you have to do is, type

li.remove(12)

the new list would be, [34,67,90]

'''pop()'''
  pop is another way of removing elements from the list. 
  It allows us to delete the last element from the list, just the way it does with a stack structure. 
  It also returns the popped element

'''Syntax'''
  list_name.pop()
'''example'''
  li = [12,34,56,24]
  a=li.pop()   # returns 24
  print(a) #prints 24

And the new list would be, [12,34,56]

List Functions
&quot;all&quot; &amp; &quot;any&quot; take a list as an argument, and return True if all or any(respectively) of their arguments evaluate to True(&amp; False otherwise).
The function &quot;enumerate&quot; can be used to iterate through the values &amp; indices of a list simultaneously.

==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==For Loop and its importance==
A loop is an essential part in coding. It gives us the ability to repeat a part of the code we have written already. This can make the code short and effective. for loop is a type of loop
Its syntax is:
    for i in range(10):
        statement
i is a variable whose initial value will be 0 ( (if initial value is not defined). This i will be incremented by 1 every time the loop runs.
So, value of i will be 0,1,2,3,4,5,6,7,8,9

For making a loop of 20 all we need to do is
    for i in range(20):
        statement

Note: Giving a colon &quot; : &quot; and tab space is essential in loop. A tab space insures that the code you are writing is in the loop
If we don't insert a tab space the computer will consider that the code is outside the loop.


The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.

&gt;&gt;&gt;for i in range(5):

       print(&quot;Hello&quot;)
Will print Hello 5 times

The for loop can also have a starting and end range. We can print all natural numbers from 1 to 10.

&gt;&gt;&gt;for i in range(1, 11):
      print(i)

Will print 1,2,3,4,5,6,7,8,9,10

Note: The loop executes for i =1 to i=10 and when i = 11, the loop terminate. The end value of range is never counted for execution.

Difference between'='and'=='in Python 
The'='operator is an Assignment Operator. 
So,a=3 will assign 3 to variable a.

The'=='operator is a Logical Operator.
So, a==3 will check if value of variable a is 3 or not.

== Printing Statements in Python ==
The print function is used to produce output. It displays a textual representation of something to the screen.

When a string is printed, the quotes around it are not displayed.

For example,
'''&gt;&gt;&gt; print('print(&quot;Hello&quot;)')'''
Will give the output as '''print(&quot;Hello&quot;)'''

== Input ==

To get an input from the user, we use the intuitively named &quot;input&quot; function. The function prompts the user for input and returns what they enter as string(With the contents automatically escaped).
'''Syntax: '''input(&quot;Enter text here&quot;)

== IF ELSE Statements ==
'''Syntax:'''  &gt;&gt;&gt;if(expression):                 
               statements

           else:
               statements


Python uses indentation to delimit the blocks of code (It doesn't use curly braces).

If statements can be nested, one inside other. This means '''inner if statement''' in the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.

We can also use chain of if &amp; else statements to determine which option in a series of possibilities is true.

== elif Statements ==
The '''&quot;elif&quot; (Short for else if)''' statement is a shortcut to use when chaining multiple if &amp; else statements. A series of if elif statements can have a final else block, which is called if none of the if or elif conditions is true.
&lt;p&gt; '''Example :'''&gt;&gt;&gt; if(a&gt;b):
                               (statement) 
                          elif(b&gt;a):
                                (statement) 
                          elif(c&gt;b):
                                (statement)   
                       else:
                                (statement)
&lt;/p&gt;

== Range ==
The range function creates a sequential list of numbers.

'''&gt;&gt;&gt;number = list(range(10))

'''&gt;&gt;&gt;print(number)
'''

'''Will give the output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
''''''

The call to list is necessary because range by itself creates a &quot;range object&quot; &amp; this must be converted to a list if you want to use it as one.

If range is called with one argument, it produces an object with values from 0 to that argument minus 1.
If it is called with two arguments, it produces values from the first value to the second value minus 1.

Range can also have a third argument, which determines the interval of the sequence produced. This third argument MUST be an integer.

'''&gt;&gt;&gt;number=list(range(5, 20, 2))

'''Will give the output: [5, 7, 9, 11, 13, 15, 17, 19]
''''''

&gt;&gt;&gt;range(n) is implicitly from 0 to n-1.

&gt;&gt;&gt;range(i, j, k) produces a sequences in steps of k. negative k counts down.

'''Sequence produced by range() is not a list.
'''

'''Use list(range(...)) to get a list.
'''</text>
      <sha1>lyusinxh2qfqd9r3yb0ecj2sks5daoy</sha1>
    </revision>
  </page>
</mediawiki>
