<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>JOCWiki</sitename>
    <dbname>Jocwiki_second</dbname>
    <base>http://sccilabs.org/jocwiki2/index.php/Main_Page</base>
    <generator>MediaWiki 1.30.0</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">JOCWiki</namespace>
      <namespace key="5" case="first-letter">JOCWiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
      <namespace key="2600" case="first-letter">Topic</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Lecture Notes:Week 7</title>
    <ns>0</ns>
    <id>693</id>
    <revision>
      <id>1597</id>
      <timestamp>2019-03-09T13:52:35Z</timestamp>
      <contributor>
        <username>Kapil</username>
        <id>1726</id>
      </contributor>
      <comment>Week 7 Supernotes</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="762">SNAKE AND LADDERS PROGRAM
It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.
	Each player has one pawn of different colors.
	Players roll dice sequentially(one by one) and then move their respective pawn accordingly
       Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
      If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder.)
      If pawn land on a snake then it move few unit downwards(till the tail of the snake).
      One who reaches 100 first is the winner.</text>
      <sha1>44bgs58wtys8lz1vuk6xnu2dioc3rc1</sha1>
    </revision>
    <revision>
      <id>1598</id>
      <parentid>1597</parentid>
      <timestamp>2019-03-09T13:57:36Z</timestamp>
      <contributor>
        <username>Kapil</username>
        <id>1726</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="798">&lt;b&gt;'''SNAKE AND LADDERS PROGRAM'''&lt;/b&gt;&lt;br&gt;
It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
1.	Each player has one pawn of different colors.&lt;br&gt;
2.	Players roll dice sequentially(one by one) and then move their respective pawn accordingly&lt;br&gt;
3.      Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.&lt;br&gt;
4.     If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder.)&lt;br&gt;
5.      If pawn land on a snake then it move few unit downwards(till the tail of the snake).&lt;br&gt;
6.     One who reaches 100 first is the winner.&lt;br&gt;</text>
      <sha1>dqpjidrzek59ve73egexhl08cskoykr</sha1>
    </revision>
    <revision>
      <id>1601</id>
      <parentid>1598</parentid>
      <timestamp>2019-03-09T14:15:24Z</timestamp>
      <contributor>
        <username>Kapil</username>
        <id>1726</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="754">== SNAKE AND LADDERS GAME ==
It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.</text>
      <sha1>8x13fkp41dphxa8pwkpois9uxvq17jc</sha1>
    </revision>
    <revision>
      <id>1707</id>
      <parentid>1601</parentid>
      <timestamp>2019-03-12T04:49:13Z</timestamp>
      <contributor>
        <username>Som</username>
        <id>1910</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1319">== SNAKE AND LADDERS GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;


== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;</text>
      <sha1>1jvzyugevspefab7lfz0xs6lmr50ldg</sha1>
    </revision>
    <revision>
      <id>1708</id>
      <parentid>1707</parentid>
      <timestamp>2019-03-12T04:51:50Z</timestamp>
      <contributor>
        <username>Som</username>
        <id>1910</id>
      </contributor>
      <comment>/* SNAKE AND LADDERS GAME */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1319">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;</text>
      <sha1>t6oo4ylbam29j2qhx405xvwx9ria1wp</sha1>
    </revision>
    <revision>
      <id>1709</id>
      <parentid>1708</parentid>
      <timestamp>2019-03-12T04:52:16Z</timestamp>
      <contributor>
        <username>Som</username>
        <id>1910</id>
      </contributor>
      <comment>/* GUESS THE MOVIE (Revision Week 4) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1328">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;</text>
      <sha1>m3uct6yar4v9cyk2oobyjisotzc6xbn</sha1>
    </revision>
    <revision>
      <id>1718</id>
      <parentid>1709</parentid>
      <timestamp>2019-03-12T17:39:17Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2560">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.</text>
      <sha1>bz0c8d7dvn54korm8l1sotzy9bwfqpg</sha1>
    </revision>
    <revision>
      <id>1719</id>
      <parentid>1718</parentid>
      <timestamp>2019-03-12T17:42:27Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2956">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()</text>
      <sha1>lxo1wccz26zl50u5e675svokxz2hc1u</sha1>
    </revision>
    <revision>
      <id>1720</id>
      <parentid>1719</parentid>
      <timestamp>2019-03-12T17:48:45Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3503">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()</text>
      <sha1>fuyfl6h3lw61y18yolaa8x5c5svpqk1</sha1>
    </revision>
    <revision>
      <id>1721</id>
      <parentid>1720</parentid>
      <timestamp>2019-03-12T18:03:06Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4489">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''


To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.</text>
      <sha1>6dfpnr1mr53t13k31125m9ls1xmaht1</sha1>
    </revision>
    <revision>
      <id>1722</id>
      <parentid>1721</parentid>
      <timestamp>2019-03-12T18:05:37Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Data Structure: SETS */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4488">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.</text>
      <sha1>0lgui7gxshqjs139knu1chkcddxn9r3</sha1>
    </revision>
    <revision>
      <id>1726</id>
      <parentid>1722</parentid>
      <timestamp>2019-03-13T09:24:11Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4951">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file)
        #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']</text>
      <sha1>n90wthddzwqqhnqxlu1i9gq8awq2zxc</sha1>
    </revision>
    <revision>
      <id>1727</id>
      <parentid>1726</parentid>
      <timestamp>2019-03-13T09:28:30Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4946">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file)
    #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()
Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']</text>
      <sha1>2zdjrvtga8ademf6ytfqjzz2fzbja1r</sha1>
    </revision>
    <revision>
      <id>1728</id>
      <parentid>1727</parentid>
      <timestamp>2019-03-13T09:29:24Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4942">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()
Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']</text>
      <sha1>8imj4c5v084q4qntmwlefqs7mc4ypdc</sha1>
    </revision>
    <revision>
      <id>1729</id>
      <parentid>1728</parentid>
      <timestamp>2019-03-13T09:33:17Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4929">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()
Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']</text>
      <sha1>srrjhsi9j2xyewy7kfymmv7s809fxde</sha1>
    </revision>
    <revision>
      <id>1730</id>
      <parentid>1729</parentid>
      <timestamp>2019-03-13T09:33:40Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4942">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()
Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']</text>
      <sha1>8imj4c5v084q4qntmwlefqs7mc4ypdc</sha1>
    </revision>
    <revision>
      <id>1731</id>
      <parentid>1730</parentid>
      <timestamp>2019-03-13T09:34:10Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4943">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']</text>
      <sha1>t30sh0e41xbw3kiuouyu5qkqpj4bebv</sha1>
    </revision>
    <revision>
      <id>1732</id>
      <parentid>1731</parentid>
      <timestamp>2019-03-13T11:59:52Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5754">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities'''
from gmplot import gmplot 

#latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
#draws a line between the scattered points 
#here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note:'''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.</text>
      <sha1>e7p53grmydnrke8djvroiqau5l2syxk</sha1>
    </revision>
    <revision>
      <id>1733</id>
      <parentid>1732</parentid>
      <timestamp>2019-03-13T12:01:33Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5771">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities'''
&lt;nowiki&gt;from gmplot import gmplot 

#latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
#draws a line between the scattered points 
#here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note:'''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.</text>
      <sha1>2wjgpnw24dicy4lhl00tw1xxx97nndc</sha1>
    </revision>
    <revision>
      <id>1734</id>
      <parentid>1733</parentid>
      <timestamp>2019-03-13T12:07:39Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5780">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot
&lt;pre&gt;
'''Simple map with a line connecting cities'''
&lt;nowiki&gt;from gmplot import gmplot 

# latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
# draws a line between the scattered points 
# here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.</text>
      <sha1>ssx6vrqd2mmlwyo8ypltq27sj1zool1</sha1>
    </revision>
    <revision>
      <id>1735</id>
      <parentid>1734</parentid>
      <timestamp>2019-03-13T12:08:21Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5776">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities'''

&lt;nowiki&gt;from gmplot import gmplot 

# latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
# draws a line between the scattered points 
# here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.</text>
      <sha1>sn7b5d7r6nuspayho9j9g5wdfzi7ij9</sha1>
    </revision>
    <revision>
      <id>1736</id>
      <parentid>1735</parentid>
      <timestamp>2019-03-13T12:09:01Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5777">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

&lt;nowiki&gt;from gmplot import gmplot 

# latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
# draws a line between the scattered points 
# here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.</text>
      <sha1>if1avmwnlzs651xinx7dl452jr66d7j</sha1>
    </revision>
    <revision>
      <id>1739</id>
      <parentid>1736</parentid>
      <timestamp>2019-03-13T15:37:11Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6663">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

&lt;nowiki&gt;from gmplot import gmplot 

# latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
# draws a line between the scattered points 
# here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.

== Itertools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.
'''chain''' -- combines severable iterables into a long one.
'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>lun91f59km1folpmvsq40xqwu3j2x1x</sha1>
    </revision>
    <revision>
      <id>1740</id>
      <parentid>1739</parentid>
      <timestamp>2019-03-13T15:38:06Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Itertools */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6666">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

&lt;nowiki&gt;from gmplot import gmplot 

# latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
# draws a line between the scattered points 
# here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>6ach97fljbxdj6ee1q0cnrwyt2eyysk</sha1>
    </revision>
    <revision>
      <id>1741</id>
      <parentid>1740</parentid>
      <timestamp>2019-03-13T15:47:54Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Data Structure: SETS */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7151">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.

The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator ''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

&lt;nowiki&gt;from gmplot import gmplot 

# latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
# draws a line between the scattered points 
# here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>amprj818cf3rhr976c2lwgt8b9hxzcx</sha1>
    </revision>
    <revision>
      <id>1742</id>
      <parentid>1741</parentid>
      <timestamp>2019-03-13T15:48:31Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Data Structure: SETS */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7153">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;pre&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/pre&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

&lt;nowiki&gt;from gmplot import gmplot 

# latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
# draws a line between the scattered points 
# here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>r5482j4c8jtady5iu075e9d4exuov36</sha1>
    </revision>
    <revision>
      <id>1744</id>
      <parentid>1742</parentid>
      <timestamp>2019-03-13T19:30:13Z</timestamp>
      <contributor>
        <username>Arunkumar</username>
        <id>2448</id>
      </contributor>
      <minor/>
      <comment>/* GUESS THE MOVIE (Revision Week 4) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7203">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

&lt;nowiki&gt;from gmplot import gmplot 

# latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
# draws a line between the scattered points 
# here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>54go3qien7d3d0qm6k93vfgm7wd8gp9</sha1>
    </revision>
    <revision>
      <id>1747</id>
      <parentid>1744</parentid>
      <timestamp>2019-03-14T02:02:52Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7706">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas. Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

&lt;nowiki&gt;from gmplot import gmplot 

# latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
# draws a line between the scattered points 
# here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>ixxasfyurb7hahhpxeb0k63cbxvs2dk</sha1>
    </revision>
    <revision>
      <id>1748</id>
      <parentid>1747</parentid>
      <timestamp>2019-03-14T02:03:27Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* What is a CSV file ? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7707">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''
&lt;pre&gt;
import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()
&lt;/pre&gt;


'''Shape: STAR'''
&lt;pre&gt;
import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()
&lt;/pre&gt;


'''Shape: HEXAGON'''
&lt;pre&gt;
import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''
import csv 
with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file
	for row in reader:
		print(row)
file.close()

Output:
['roll_no', 'name']
['1', 'abc']
['2', 'pqr']
['3', 'xyz']

== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

&lt;nowiki&gt;from gmplot import gmplot 

# latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 
longs = [ 75.576200,75.770800,75.8573] 
 
#shows the center of map 
gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
# scatter points on the google map 
gmap.scatter( lats, longs, size=40 ) 
  
# draws a line between the scattered points 
# here mediumblue is the color of the line and edge_width is thickness
gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:
gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>9ff8inpl3i36mkx74e3kfdoniy5ezwz</sha1>
    </revision>
    <revision>
      <id>1749</id>
      <parentid>1748</parentid>
      <timestamp>2019-03-14T02:09:57Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8138">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>27ncfx4jto2f6ivnyjbod9b9k84s9yn</sha1>
    </revision>
    <revision>
      <id>1750</id>
      <parentid>1749</parentid>
      <timestamp>2019-03-14T02:12:58Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8410">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )
Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>qki0gsg67wzbukqw8ol549d6ztajrb8</sha1>
    </revision>
    <revision>
      <id>1753</id>
      <parentid>1750</parentid>
      <timestamp>2019-03-14T06:02:58Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8411">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )&lt;/nowiki&gt;

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>o4xc9en11dfbh8vwops83xgsyal808g</sha1>
    </revision>
    <revision>
      <id>1788</id>
      <parentid>1753</parentid>
      <timestamp>2019-03-15T12:42:07Z</timestamp>
      <contributor>
        <username>Harinder</username>
        <id>3081</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8402">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count
for i in count(3):
      print(i)
      if i &gt;= 11:
         break

'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>a5j7t0rhy4g2xyhnr18ik8qjug79nei</sha1>
    </revision>
    <revision>
      <id>1789</id>
      <parentid>1788</parentid>
      <timestamp>2019-03-15T14:58:44Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* IterTools */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8404">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.</text>
      <sha1>s9cqduvow4gqadnu5h97w86p9xrhrtu</sha1>
    </revision>
    <revision>
      <id>1791</id>
      <parentid>1789</parentid>
      <timestamp>2019-03-15T17:19:42Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8663">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.

== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)</text>
      <sha1>qyynkkk6ynpgwq7coq6alw81emavb0g</sha1>
    </revision>
    <revision>
      <id>1792</id>
      <parentid>1791</parentid>
      <timestamp>2019-03-15T17:35:51Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9160">
== SNAKES AND LADDER GAME ==

It is a game of randomness which includes no logic or thinking.This game is played between two or more people.Originally developed in India this game is famous in many parts of the world.&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Each player has one pawn of different colors.
&lt;li&gt;Players roll dice sequentially(one by one) and then move their respective pawn accordingly.
&lt;li&gt;Each player start from one and move their pawn by the number they get on dice.If they roll six they get another chance to roll.
&lt;li&gt;If their pawn land on a place where there is a ladder they move few unit upwards(till the height of the ladder).
&lt;li&gt;If pawn land on a snake then it move few unit downwards(till the tail of the snake).
&lt;li&gt;One who reaches 100 first is the winner.
&lt;/ol&gt;

&lt;br&gt;&lt;br&gt;
== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)</text>
      <sha1>rvub6ogou0ykv5ht68m5m0bzrv35l63</sha1>
    </revision>
    <revision>
      <id>1798</id>
      <parentid>1792</parentid>
      <timestamp>2019-03-16T16:37:50Z</timestamp>
      <contributor>
        <username>Divya98</username>
        <id>2439</id>
      </contributor>
      <comment>/* SNAKES AND LADDER GAME */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9330">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.
     It is originated in India and is popular all over the World. 
 1.Each player has a pawn of different color placed on number 1 on game-board.
 2.Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).If a player encounter 
   6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
 3.If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move 
   downwards till the tail of the snake.
 4.One who reaches 100 first will be a Winner.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}
&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''
&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)</text>
      <sha1>pzki9mpom8suy44l164ntyayajszunn</sha1>
    </revision>
    <revision>
      <id>1803</id>
      <parentid>1798</parentid>
      <timestamp>2019-03-17T03:58:20Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Data Structure: SETS */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9332">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.
     It is originated in India and is popular all over the World. 
 1.Each player has a pawn of different color placed on number 1 on game-board.
 2.Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).If a player encounter 
   6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
 3.If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move 
   downwards till the tail of the snake.
 4.One who reaches 100 first will be a Winner.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)</text>
      <sha1>s7q7vwji0xy1oud315p4axgpa5le3i2</sha1>
    </revision>
    <revision>
      <id>1804</id>
      <parentid>1803</parentid>
      <timestamp>2019-03-17T04:05:13Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9959">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.
     It is originated in India and is popular all over the World. 
 1.Each player has a pawn of different color placed on number 1 on game-board.
 2.Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).If a player encounter 
   6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
 3.If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move 
   downwards till the tail of the snake.
 4.One who reaches 100 first will be a Winner.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''
Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''</text>
      <sha1>92p2fy49ghsafl0dzxxh321ts1llkam</sha1>
    </revision>
    <revision>
      <id>1805</id>
      <parentid>1804</parentid>
      <timestamp>2019-03-17T04:05:27Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Python Imaging Library (PIL) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9960">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.
     It is originated in India and is popular all over the World. 
 1.Each player has a pawn of different color placed on number 1 on game-board.
 2.Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).If a player encounter 
   6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
 3.If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move 
   downwards till the tail of the snake.
 4.One who reaches 100 first will be a Winner.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''</text>
      <sha1>lzlp1976c63zxo9qzh9j1art0me312v</sha1>
    </revision>
    <revision>
      <id>1806</id>
      <parentid>1805</parentid>
      <timestamp>2019-03-17T07:27:41Z</timestamp>
      <contributor>
        <username>Arunkumar</username>
        <id>2448</id>
      </contributor>
      <minor/>
      <comment>/* SNAKES AND LADDER GAME */  Text Formatting</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9947">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''</text>
      <sha1>h6lgalz18mnf6sw3dtxoe7wht8td5oo</sha1>
    </revision>
    <revision>
      <id>1807</id>
      <parentid>1806</parentid>
      <timestamp>2019-03-17T07:28:13Z</timestamp>
      <contributor>
        <username>Arunkumar</username>
        <id>2448</id>
      </contributor>
      <minor/>
      <comment>/* SNAKES AND LADDER GAME */  Text formatting</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9954">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''</text>
      <sha1>1hvzg74piy6xaovxvnmj0xry71i1gw6</sha1>
    </revision>
    <revision>
      <id>1808</id>
      <parentid>1807</parentid>
      <timestamp>2019-03-17T09:53:01Z</timestamp>
      <contributor>
        <username>Dipan Chandra</username>
        <id>2931</id>
      </contributor>
      <comment>/* SNAKES AND LADDER GAME */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10116">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 ans was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''</text>
      <sha1>t7lupgxw4eugnlbbtp5brmiwgvv0fhn</sha1>
    </revision>
    <revision>
      <id>1809</id>
      <parentid>1808</parentid>
      <timestamp>2019-03-17T09:53:40Z</timestamp>
      <contributor>
        <username>Dipan Chandra</username>
        <id>2931</id>
      </contributor>
      <comment>/* SNAKES AND LADDER GAME */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10121">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''</text>
      <sha1>5zwr86kmgw4qkumg8gd0rm7ju13qxap</sha1>
    </revision>
    <revision>
      <id>1810</id>
      <parentid>1809</parentid>
      <timestamp>2019-03-17T09:55:18Z</timestamp>
      <contributor>
        <username>Dipan Chandra</username>
        <id>2931</id>
      </contributor>
      <comment>/* SNAKES AND LADDER GAME */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10290">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''Paramapada Sopanam'' '''Bold text'''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''</text>
      <sha1>j9h0l5zzqq2cyuixv6ruw3uioohboz6</sha1>
    </revision>
    <revision>
      <id>1812</id>
      <parentid>1810</parentid>
      <timestamp>2019-03-17T09:56:03Z</timestamp>
      <contributor>
        <username>Dipan Chandra</username>
        <id>2931</id>
      </contributor>
      <comment>/* SNAKES AND LADDER GAME */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10282">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''</text>
      <sha1>pmd7g1tlcogw5ikieo4n9g2fxusjtuz</sha1>
    </revision>
    <revision>
      <id>1821</id>
      <parentid>1812</parentid>
      <timestamp>2019-03-17T15:29:10Z</timestamp>
      <contributor>
        <username>Jaiprince17</username>
        <id>2120</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10597">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''


== Animated Spiral with Colors added  ==

&lt;pre&gt;
from turtle import *
from math import *
pensize(10)
pencolor(&quot;blue&quot;)
penup()
radius = 20
goto(radius,0)
pendown()
for i in range(1,300):
 newangle = 2 * i * pi / 100   //indent this 
 goto( radius*cos(newangle),
 radius*sin(newangle) )
 radius = radius + 1

&lt;/pre&gt;</text>
      <sha1>65fayctz59h33ggdj8c9ms1baa7gyrw</sha1>
    </revision>
    <revision>
      <id>1823</id>
      <parentid>1821</parentid>
      <timestamp>2019-03-17T17:37:43Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10860">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''


== Animated Spiral with Colors added  ==

&lt;pre&gt;
from turtle import *
from math import *
pensize(10)
pencolor(&quot;blue&quot;)
penup()
radius = 20
goto(radius,0)
pendown()
for i in range(1,300):
 newangle = 2 * i * pi / 100   //indent this 
 goto( radius*cos(newangle),
 radius*sin(newangle) )
 radius = radius + 1

&lt;/pre&gt;

== An Amazing Design With Turtle ==

import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)
    t.left(59)</text>
      <sha1>3y2ej63zv49py3zi6n7ho8fe0y43mj5</sha1>
    </revision>
    <revision>
      <id>1824</id>
      <parentid>1823</parentid>
      <timestamp>2019-03-17T17:41:59Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11321">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''


== Operations With Images ==
* '''To open a particular image from a path'''

try:  
    img  = Image.open(path)  
except IOError: 
    pass

* '''To retrieve the size of image'''

from PIL import Image 
  
filename = &quot;image.png&quot;

with Image.open(filename) as image: 
    width, height = image.size 


* '''Save changes in image'''

img.save(path, format)     

 #format is optional, if no format is specified,  
 #it is determined from the filename extension


== Animated Spiral with Colors added  ==

&lt;pre&gt;
from turtle import *
from math import *
pensize(10)
pencolor(&quot;blue&quot;)
penup()
radius = 20
goto(radius,0)
pendown()
for i in range(1,300):
 newangle = 2 * i * pi / 100   //indent this 
 goto( radius*cos(newangle),
 radius*sin(newangle) )
 radius = radius + 1

&lt;/pre&gt;

== An Amazing Design With Turtle ==

import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)
    t.left(59)</text>
      <sha1>4i3im31b5rbccgx55u3izkdufy4v5ar</sha1>
    </revision>
    <revision>
      <id>1825</id>
      <parentid>1824</parentid>
      <timestamp>2019-03-17T17:43:37Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Operations With Images */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11704">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''


== Operations With Images ==
* '''To open a particular image from a path'''

try:  
    img  = Image.open(path)  
except IOError: 
    pass

* '''To retrieve the size of image'''

from PIL import Image 
  
filename = &quot;image.png&quot;

with Image.open(filename) as image: 
    width, height = image.size 


* '''Save changes in image'''

img.save(path, format)     

 #format is optional, if no format is specified,  
 #it is determined from the filename extension


* '''Rotating an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #Angle given 
        img = img.rotate(180)  
          
         #Saved in the same relative location 
        img.save(&quot;rotated_picture.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()

== Animated Spiral with Colors added  ==

&lt;pre&gt;
from turtle import *
from math import *
pensize(10)
pencolor(&quot;blue&quot;)
penup()
radius = 20
goto(radius,0)
pendown()
for i in range(1,300):
 newangle = 2 * i * pi / 100   //indent this 
 goto( radius*cos(newangle),
 radius*sin(newangle) )
 radius = radius + 1

&lt;/pre&gt;

== An Amazing Design With Turtle ==

import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)
    t.left(59)</text>
      <sha1>infrexekadqg8g19wvwmmytcoxalq9n</sha1>
    </revision>
    <revision>
      <id>1826</id>
      <parentid>1825</parentid>
      <timestamp>2019-03-17T17:44:34Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Operations With Images */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12149">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''


== Operations With Images ==
* '''To open a particular image from a path'''

try:  
    img  = Image.open(path)  
except IOError: 
    pass

* '''To retrieve the size of image'''

from PIL import Image 
  
filename = &quot;image.png&quot;

with Image.open(filename) as image: 
    width, height = image.size 


* '''Save changes in image'''

img.save(path, format)     

 #format is optional, if no format is specified,  
 #it is determined from the filename extension


* '''Rotating an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #Angle given 
        img = img.rotate(180)  
          
         #Saved in the same relative location 
        img.save(&quot;rotated_picture.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()

* '''Cropping an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;) 
        width, height = img.size 
          
        area = (0, 0, width/2, height/2) 
        img = img.crop(area) 
          
        #Saved in the same relative location 
        img.save(&quot;cropped_picture.jpg&quot;)  
          
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()

== Animated Spiral with Colors added  ==

&lt;pre&gt;
from turtle import *
from math import *
pensize(10)
pencolor(&quot;blue&quot;)
penup()
radius = 20
goto(radius,0)
pendown()
for i in range(1,300):
 newangle = 2 * i * pi / 100   //indent this 
 goto( radius*cos(newangle),
 radius*sin(newangle) )
 radius = radius + 1

&lt;/pre&gt;

== An Amazing Design With Turtle ==

import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)
    t.left(59)</text>
      <sha1>rmact14z52lcfsqssastc2cafylrnsk</sha1>
    </revision>
    <revision>
      <id>1827</id>
      <parentid>1826</parentid>
      <timestamp>2019-03-17T17:46:11Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Operations With Images */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12882">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''


== Operations With Images ==
* '''To open a particular image from a path'''

try:  
    img  = Image.open(path)  
except IOError: 
    pass

* '''To retrieve the size of image'''

from PIL import Image 
  
filename = &quot;image.png&quot;

with Image.open(filename) as image: 
    width, height = image.size 


* '''Save changes in image'''

img.save(path, format)     

 #format is optional, if no format is specified,  
 #it is determined from the filename extension


* '''Rotating an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #Angle given 
        img = img.rotate(180)  
          
         #Saved in the same relative location 
        img.save(&quot;rotated_picture.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()


* '''Cropping an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;) 
        width, height = img.size 
          
        area = (0, 0, width/2, height/2) 
        img = img.crop(area) 
          
        #Saved in the same relative location 
        img.save(&quot;cropped_picture.jpg&quot;)  
          
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()


* '''Creating a thumbnail'''

This method creates a thumbnail of the image that is opened. It does not return a new image object, it makes in-place modification to the currently opened image object itself. If you do not want to change the original image object, create a copy and then apply this method. This method also evaluates the appropriate to maintain the aspect ratio of the image according to the size passed.


from PIL import Image 
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #In-place modification 
        img.thumbnail((200, 200))  
          
        img.save(&quot;thumb.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()

== Animated Spiral with Colors added  ==

&lt;pre&gt;
from turtle import *
from math import *
pensize(10)
pencolor(&quot;blue&quot;)
penup()
radius = 20
goto(radius,0)
pendown()
for i in range(1,300):
 newangle = 2 * i * pi / 100   //indent this 
 goto( radius*cos(newangle),
 radius*sin(newangle) )
 radius = radius + 1

&lt;/pre&gt;

== An Amazing Design With Turtle ==

import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)
    t.left(59)</text>
      <sha1>cfpf5keig4rgbs5yrwpk6y5o24o6gaj</sha1>
    </revision>
    <revision>
      <id>1828</id>
      <parentid>1827</parentid>
      <timestamp>2019-03-17T17:46:36Z</timestamp>
      <contributor>
        <username>Hardev k</username>
        <id>1650</id>
      </contributor>
      <comment>/* Operations With Images */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12883">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
	reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']


== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''


== Operations With Images ==
* '''To open a particular image from a path'''

try:  
    img  = Image.open(path)  
except IOError: 
    pass

* '''To retrieve the size of image'''

from PIL import Image 
  
filename = &quot;image.png&quot;

with Image.open(filename) as image: 
    width, height = image.size 


* '''Save changes in image'''

img.save(path, format)     

 #format is optional, if no format is specified,  
 #it is determined from the filename extension


* '''Rotating an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #Angle given 
        img = img.rotate(180)  
          
         #Saved in the same relative location 
        img.save(&quot;rotated_picture.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()


* '''Cropping an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;) 
        width, height = img.size 
          
        area = (0, 0, width/2, height/2) 
        img = img.crop(area) 
          
        #Saved in the same relative location 
        img.save(&quot;cropped_picture.jpg&quot;)  
          
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()


* '''Creating a thumbnail'''

This method creates a thumbnail of the image that is opened. It does not return a new image object, it makes in-place modification to the currently opened image object itself. If you do not want to change the original image object, create a copy and then apply this method. This method also evaluates the appropriate to maintain the aspect ratio of the image according to the size passed.


from PIL import Image 

def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #In-place modification 
        img.thumbnail((200, 200))  
          
        img.save(&quot;thumb.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()

== Animated Spiral with Colors added  ==

&lt;pre&gt;
from turtle import *
from math import *
pensize(10)
pencolor(&quot;blue&quot;)
penup()
radius = 20
goto(radius,0)
pendown()
for i in range(1,300):
 newangle = 2 * i * pi / 100   //indent this 
 goto( radius*cos(newangle),
 radius*sin(newangle) )
 radius = radius + 1

&lt;/pre&gt;

== An Amazing Design With Turtle ==

import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)
    t.left(59)</text>
      <sha1>i81n0m84mcav4raw7o4bzuvu0s01y3h</sha1>
    </revision>
    <revision>
      <id>2932</id>
      <parentid>1828</parentid>
      <timestamp>2019-04-20T12:28:43Z</timestamp>
      <contributor>
        <username>Dharmesh.enc</username>
        <id>475</id>
      </contributor>
      <comment>/* CSV files */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12888">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle
star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle
polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()


== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
       reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']

== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''


== Operations With Images ==
* '''To open a particular image from a path'''

try:  
    img  = Image.open(path)  
except IOError: 
    pass

* '''To retrieve the size of image'''

from PIL import Image 
  
filename = &quot;image.png&quot;

with Image.open(filename) as image: 
    width, height = image.size 


* '''Save changes in image'''

img.save(path, format)     

 #format is optional, if no format is specified,  
 #it is determined from the filename extension


* '''Rotating an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #Angle given 
        img = img.rotate(180)  
          
         #Saved in the same relative location 
        img.save(&quot;rotated_picture.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()


* '''Cropping an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;) 
        width, height = img.size 
          
        area = (0, 0, width/2, height/2) 
        img = img.crop(area) 
          
        #Saved in the same relative location 
        img.save(&quot;cropped_picture.jpg&quot;)  
          
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()


* '''Creating a thumbnail'''

This method creates a thumbnail of the image that is opened. It does not return a new image object, it makes in-place modification to the currently opened image object itself. If you do not want to change the original image object, create a copy and then apply this method. This method also evaluates the appropriate to maintain the aspect ratio of the image according to the size passed.


from PIL import Image 

def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #In-place modification 
        img.thumbnail((200, 200))  
          
        img.save(&quot;thumb.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()

== Animated Spiral with Colors added  ==

&lt;pre&gt;
from turtle import *
from math import *
pensize(10)
pencolor(&quot;blue&quot;)
penup()
radius = 20
goto(radius,0)
pendown()
for i in range(1,300):
 newangle = 2 * i * pi / 100   //indent this 
 goto( radius*cos(newangle),
 radius*sin(newangle) )
 radius = radius + 1

&lt;/pre&gt;

== An Amazing Design With Turtle ==

import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)
    t.left(59)</text>
      <sha1>szooy87hpi2hsyb62sish73q0qa4dnz</sha1>
    </revision>
    <revision>
      <id>2943</id>
      <parentid>2932</parentid>
      <timestamp>2019-04-22T05:56:45Z</timestamp>
      <contributor>
        <username>Aritraghosh452</username>
        <id>2648</id>
      </contributor>
      <minor/>
      <comment>/* Basic Shapes Using Turtle Module */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12890">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle

t = turtle.Turtle()

for i in range(4):
      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle

star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle

polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()

== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
       reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']

== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''


== Operations With Images ==
* '''To open a particular image from a path'''

try:  
    img  = Image.open(path)  
except IOError: 
    pass

* '''To retrieve the size of image'''

from PIL import Image 
  
filename = &quot;image.png&quot;

with Image.open(filename) as image: 
    width, height = image.size 


* '''Save changes in image'''

img.save(path, format)     

 #format is optional, if no format is specified,  
 #it is determined from the filename extension


* '''Rotating an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #Angle given 
        img = img.rotate(180)  
          
         #Saved in the same relative location 
        img.save(&quot;rotated_picture.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()


* '''Cropping an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;) 
        width, height = img.size 
          
        area = (0, 0, width/2, height/2) 
        img = img.crop(area) 
          
        #Saved in the same relative location 
        img.save(&quot;cropped_picture.jpg&quot;)  
          
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()


* '''Creating a thumbnail'''

This method creates a thumbnail of the image that is opened. It does not return a new image object, it makes in-place modification to the currently opened image object itself. If you do not want to change the original image object, create a copy and then apply this method. This method also evaluates the appropriate to maintain the aspect ratio of the image according to the size passed.


from PIL import Image 

def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #In-place modification 
        img.thumbnail((200, 200))  
          
        img.save(&quot;thumb.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()

== Animated Spiral with Colors added  ==

&lt;pre&gt;
from turtle import *
from math import *
pensize(10)
pencolor(&quot;blue&quot;)
penup()
radius = 20
goto(radius,0)
pendown()
for i in range(1,300):
 newangle = 2 * i * pi / 100   //indent this 
 goto( radius*cos(newangle),
 radius*sin(newangle) )
 radius = radius + 1

&lt;/pre&gt;

== An Amazing Design With Turtle ==

import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)
    t.left(59)</text>
      <sha1>5net1fw57l90k5z3rqvxfj3fn19r5e1</sha1>
    </revision>
    <revision>
      <id>2944</id>
      <parentid>2943</parentid>
      <timestamp>2019-04-22T06:10:43Z</timestamp>
      <contributor>
        <username>Aritraghosh452</username>
        <id>2648</id>
      </contributor>
      <comment>/* Basic Shapes Using Turtle Module */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12969">
== SNAKES AND LADDER GAME ==

Snake and Ladder is a game which involves a whole lot of randomness and there is no place for logic and thinking. The game is played between two or more players on a game-board having numbered from 1 to 100, gridded squares. A number of &quot;ladders&quot; and &quot;snakes&quot; are pictured on the board, each connecting two specific board squares.

It is possible to trace the origins of the game back to the 2nd Century B.C. as the Indian game of ''''''Paramapada Sopanam''''''— &quot;The Ladder to Salvation.&quot;

It is originated in India and is popular all over the World. 
# Each player has a pawn of different color placed on number 1 on game-board.
# Each player roll a die one by one and move pawn forward accordingly(no. of steps forward = no. on die).
# If a player encounter 6 on die ,will move pawn 6 steps forward along with getting another chance to roll a die.
# If player's pawn land on a ladder will climb up to the height of the ladder and if pawn land on snake's mouth will move downwards till the tail of the snake.
# One who reaches 100 first will be a Winner.
&lt;br /&gt;

Snakes and Ladders was brought to the UK in 1892 and was commercially published for the first time in the USA by Milton Bradley in 1943 as &quot;Chutes and Ladders&quot;.



.

== GUESS THE MOVIE (Revision Week 4) ==
&lt;syntaxhighlight lang=&quot;Python&quot; line='line'&gt;
import random
movies = ['tarzan','jumangi','titanic','matrix','robot','simbaa','kedarnath','andhadhun']
film  = list(random.choice(movies))
guess = []
for i in range(len(film)):
    guess.append('_')
for i in guess:
    print(i,end=&quot; &quot;)
while '_' in guess :
    alpha = input(&quot;Guess an alphabet&quot;)
    while alpha in film:
        index = film.index(alpha)
        film[index]=' '
        guess[index]=alpha
    for i in guess:
        print(i,end=&quot; &quot;)

print(&quot;\nYou have successfully guessed the film&quot;)
&lt;/syntaxhighlight&gt;

== Turtle Module ==
&quot;Turtle&quot; is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use different functions which can move the turtle around.

'''Commonly used turtle methods are:'''

* '''Turtle()''' -- creates and returns a new turtle object.

* '''forward(x)''' -- moves the turtle forward by the specified amount.

* '''backward(y)''' -- moves the turtle backward by the specifies amount.  

* '''right(angle)''' -- turns the turtle clockwise.

* '''left(angle)''' -- turns the turtle anti-clockwise.

* '''penup()''' -- picks up the turtle's pen.

* '''pendown()''' -- puts down the turtle's pen.

* '''color(name)''' -- changes the colour of the turtle's pen.

* '''fillcolor(name)''' -- used to fill a colour in a polygon.

* '''heading()''' -- returns the current heading.

* '''position()''' -- returns the current position.

* '''goto(x, y)''' -- moves the turtle to position (x, y).

* '''begin_fill()''' -- remember the starting point for a filled polygon.

* '''end_fill()''' -- close the polygon and fill with the current colour.

* '''dot()''' -- leave the dot at the current position.

* '''stamp()''' -- leaves an impression of a turtle shape at the current location.

== Plotting Using Turtle ==
To make use of the turtle methods and functionalities, we need to import turtle. Turtle comes packed with the standard Python package and need not be installed externally.

The roadmap for executing a turtle program follows 4 steps:

* 1. Import the turtle module.

* 2. Create a turtle to control.

* 3. Draw around using the turtle methods.

* 4. Run turtle.done()

== Basic Shapes Using Turtle Module ==
'''Shape: SQUARE'''

import turtle
#the turtle module -- using it we can give instruction to a point for movement
t = turtle.Turtle()

for i in range(4):

      t.forward(50)
      t.right(90)

turtle.done()



'''Shape: STAR'''

import turtle

star = turtle.Turtle()

for i in range(50):
      star.forward(50)
      star.right(144)

turtle.done()



'''Shape: HEXAGON'''

import turtle

polygon = turtle.Turtle()

num_sides = 6
side = 70
angle = 360.0/num_sides

for i in range(num_sides):
      polygon.forward(side)
      polygon.right(angle)

turtle.done()

== Data Structure: SETS ==
Sets are data structures, similar to lists or dictionaries. 
They are created using curly braces, or the set function. 
They share some functionality with lists, such as use of &quot;in&quot; to check whether they contain a particular item.

&gt;&gt;&gt;num_set = {1, 2, 3, 4, 5}

&gt;&gt;&gt;word_set = set([&quot;hello&quot;, &quot;world&quot;])

&gt;&gt;&gt;print(3 in num_set)      --&gt; '''True'''

&gt;&gt;&gt;print(&quot;hello&quot; not in word_set)   --&gt; '''False'''

To create an empty set, we must use '''set()''' as '''{}'''creates an empty dictionary.

Sets differ from lists in several ways, but share several list operations.

They are unordered, which means that they can't be indexed. '''They cannot contain duplicate elements.'''

Due to the way they are stored, its faster to check whether an item is a part of a set, rather than a art of a list.

Instead of using &quot;append()&quot; to add to a set, use '''add()'''.

The method '''remove()''' removes a specific element from a set; '''pop()''' removes an arbitrary element.


The basic use of sets include membership testing &amp; the elimination of duplicate entries.

Sets can be combined using mathematical operations.

The '''union''' operator '''|''' combines two sets to form a new one containing items in either.

The '''intersection''' operator '''&amp;''' gets items ONLY in BOTH.

The '''difference''' operator '''-''' gets items in the first set but not in the second.

The '''symmetric difference''' operator '''^''' gets items in EITHER set, BUT NOT both.

== What is a CSV file ? ==
CSV files are used to store a large number of variables - or data. They are incredibly simplified spreadsheets - think excel - 
only the content is stored in plain text.

And the CSV module is a built-in function that allows Python to parse these types of files.

The text inside a CSV file is laid out in rows, and each of those has columns, all separated by commas.
Every line in the file is a row in the spreadsheet, while the commas are used to define and separate cells.

== CSV files ==
A csv file is a text file that stores tabular data separated by comma ',' where csv stands for comma separated values.
csv files have .csv extension.

'''Reading a csv file:'''

import csv 

with open('data.csv') as file:
       reader = csv.reader(file) #reader() method returns an object which helps to iterate rows in a csv file

	for row in reader:
		print(row)

file.close()

Output:
['roll_no', 'name']

['1', 'abc']

['2', 'pqr']

['3', 'xyz']

== Working with the CSV Module ==
To pull information from CSV files you use loop and split methods to get the data from individual columns.

The CSV module explicitly exists to handle this task, making it much easier to deal with CSV formatted files.

This becomes especially important when you are working with data that’s been exported from actual spreadsheets and databases to text files. This information can be tough to read on its own.


== CSV Functions ==
The CSV module includes all the necessary functions built in. They are:

* '''csv.reader'''
* '''csv.writer'''
* '''csv.register_dialect'''
* '''csv.unregister_dialect'''
* '''csv.get_dialect'''
* '''csv.list_dialects'''
* '''csv.field_size_limit'''


== GMPLOT ==
'''Command to install gmplot:'''
pip install gmplot

'''Simple map with a line connecting cities:'''

from gmplot import gmplot 

 # latitudes and longitudes of three cities
lats = [ 31.326000,31.224000,30.9010] 

longs = [ 75.576200,75.770800,75.8573] 
 
 #shows the center of map 

gmap = gmplot.GoogleMapPlotter(31.268900,75.701500, zoom=12) 
 
 # scatter points on the google map 

gmap.scatter( lats, longs, size=40 ) 
  
 # draws a line between the scattered points 

 # here mediumblue is the color of the line and edge_width is thickness

gmap.plot(lats, longs,'mediumblue', edge_width = 4) 
  
gmap.draw( &quot;map.html&quot; )

'''Note: '''We can also provide path of the html file as following:

gmap.draw( &quot;C:\\Users\\usr\\.spyder-py3\\map.html&quot; )

Use double backslash because single \ acts as escape character.



== Geocoding ==
gmplot contains a simple wrapper around Google's geocoding service enabling map initilization to the location of your choice. Rather than providing latitude, longitude, and zoom level during initialization, grab your gmplot instance with a location:

'''gmap = gmplot.GoogleMapPlotter.from_geocode(&quot;India&quot;)'''

'''Plot Types'''

* Polygons with fills - '''plot'''
* Drop pins - '''marker'''
* Scatter points - '''scatter'''
* Grid lines - '''grid'''
* Heatmaps - '''heatmap'''


== IterTools ==
The module '''itertools''' is a standard library that contains several functions that are useful in functional programming.
One type of function it produces is '''infinite itertools'''.

The function '''count()''' counts up infinitely from a value.

The function '''cycle()''' infinitely iterates through an iterable (for instance, a list or string).

The function '''repeat()''' repeats an object, either infinitely or a specific number of times.


from itertools import count

for i in count(3):
      print(i)
      if i &gt;= 11:
         break


'''Output'''
3 4 5 6 7 8 9 10 11

Some functions in itertools work in a way similar to map &amp; filters.

'''takewhile''' -- takes items from an iterable while a predicate function remains true.

'''chain''' -- combines severable iterables into a long one. 

'''accumulate''' -- returns a running total of values in an iterable.

== Turtle Program to Print &quot;Rainbow Benzene&quot; ==
import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)

== Python Imaging Library (PIL) ==
Python Imaging Library (abbreviated as PIL) (in newer versions known as Pillow) is a free library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. 

'''Capabilities'''

Pillow offers several standard procedures for image manipulation. These include: 

* Per-pixel manipulations

* Masking and transparency handling

* Image filtering, such as blurring, contouring, smoothing, or edge finding

* Image enhancing, such as sharpening, adjusting brightness, contrast or color

* Adding text to images and much more'''


== Operations With Images ==
* '''To open a particular image from a path'''

try:  
    img  = Image.open(path)  
except IOError: 
    pass

* '''To retrieve the size of image'''

from PIL import Image 
  
filename = &quot;image.png&quot;

with Image.open(filename) as image: 
    width, height = image.size 


* '''Save changes in image'''

img.save(path, format)     

 #format is optional, if no format is specified,  
 #it is determined from the filename extension


* '''Rotating an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #Angle given 
        img = img.rotate(180)  
          
         #Saved in the same relative location 
        img.save(&quot;rotated_picture.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()


* '''Cropping an image'''

from PIL import Image 
  
def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;) 
        width, height = img.size 
          
        area = (0, 0, width/2, height/2) 
        img = img.crop(area) 
          
        #Saved in the same relative location 
        img.save(&quot;cropped_picture.jpg&quot;)  
          
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()


* '''Creating a thumbnail'''

This method creates a thumbnail of the image that is opened. It does not return a new image object, it makes in-place modification to the currently opened image object itself. If you do not want to change the original image object, create a copy and then apply this method. This method also evaluates the appropriate to maintain the aspect ratio of the image according to the size passed.


from PIL import Image 

def main(): 
    try: 
        #Relative Path 
        img = Image.open(&quot;picture.jpg&quot;)  
          
        #In-place modification 
        img.thumbnail((200, 200))  
          
        img.save(&quot;thumb.jpg&quot;) 
    except IOError: 
        pass
  
if __name__ == &quot;__main__&quot;: 
    main()

== Animated Spiral with Colors added  ==

&lt;pre&gt;
from turtle import *
from math import *
pensize(10)
pencolor(&quot;blue&quot;)
penup()
radius = 20
goto(radius,0)
pendown()
for i in range(1,300):
 newangle = 2 * i * pi / 100   //indent this 
 goto( radius*cos(newangle),
 radius*sin(newangle) )
 radius = radius + 1

&lt;/pre&gt;

== An Amazing Design With Turtle ==

import turtle

colors = ['red', 'purple', 'blue', 'green', 'orange', 'yellow']

t = turtle.Pen()

turtle.bgcolor('black')

for x in range(360):
    t.pencolor(colors[x%6])
    t.width(x/100+1)
    t.forward(x)
    t.left(59)</text>
      <sha1>4c1hlu5yfu7hbcckslvbfe56vbg0k74</sha1>
    </revision>
  </page>
</mediawiki>
